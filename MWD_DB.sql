CREATE TABLE  "ITEMS" 
   (	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"NAME" VARCHAR2(30) NOT NULL ENABLE, 
	"LIST_PRICE" NUMBER(8,2) DEFAULT 0, 
	"AVAILABILITY" VARCHAR2(30) DEFAULT 'IN_STOCK', 
	"SALE_STATUS" VARCHAR2(30) DEFAULT 'NONE', 
	"ITEM_TYPE" VARCHAR2(45), 
	"DESCRIPTION" VARCHAR2(2000), 
	"COST_TOTAL" NUMBER(8,2) DEFAULT 0, 
	"TIME_MIN" NUMBER DEFAULT 0, 
	"LENGTH_MM" NUMBER(8,2), 
	"WIDTH_MM" NUMBER(8,2), 
	"THICKNESS_MM" NUMBER(8,2), 
	"HEIGHT_MM" NUMBER(8,2), 
	"WEIGHT_GR" NUMBER(8,2), 
	"CURRENT_AMOUNT" NUMBER, 
	"PURCHASED_AMOUNT" NUMBER, 
	 CONSTRAINT "ITEMS_PK" PRIMARY KEY ("ITEM_ID") ENABLE, 
	 CONSTRAINT "ITEMS_UK" UNIQUE ("NAME") ENABLE
   )
/
CREATE TABLE  "CREATED_ITEMS" 
   (	"CREATED_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"CREATED_ITEM_TYPE" VARCHAR2(45), 
	 CONSTRAINT "CREATED_ITEMS_PK" PRIMARY KEY ("CREATED_ITEM_ID") ENABLE
   )
/
CREATE TABLE  "ACCESSORIES" 
   (	"CREATED_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"ACCESSORY_TYPE" VARCHAR2(45), 
	 CONSTRAINT "ACCESSORIES_PK" PRIMARY KEY ("CREATED_ITEM_ID") ENABLE
   )
/
CREATE TABLE  "ACCESSORIES_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"CREATED_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"ACCESSORY_TYPE" VARCHAR2(45)
   )
/
CREATE TABLE  "AMERICAN_WIRE_GAUGES" 
   (	"AWG_ID" NUMBER NOT NULL ENABLE, 
	"AWG" VARCHAR2(30), 
	"INCH_DIAMETER" NUMBER(10,4), 
	"DIAMETER_MM" NUMBER(10,4), 
	 CONSTRAINT "AMERICAN_WIRE_GAUGE_PK" PRIMARY KEY ("AWG_ID") ENABLE, 
	 CONSTRAINT "AMERICAN_WIRE_GAUGE_UK" UNIQUE ("AWG") ENABLE
   )
/
CREATE TABLE  "AMERICAN_WIRE_GAUGES_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"AWG_ID" NUMBER NOT NULL ENABLE, 
	"AWG" VARCHAR2(30), 
	"INCH_DIAMETER" NUMBER(10,4), 
	"DIAMETER_MM" NUMBER(10,4)
   )
/
CREATE TABLE  "MATERIALS" 
   (	"ABBREVIATION" VARCHAR2(45) NOT NULL ENABLE, 
	"BASE_MATERIAL" VARCHAR2(45), 
	"PROCESSING" VARCHAR2(45), 
	"PROCESSING_MATERIAL" VARCHAR2(45), 
	"ALLERGENS_EXCLUDED" VARCHAR2(45), 
	"BASE_MATERIALS_INCLUDED" VARCHAR2(2000), 
	"PARENT_MATERIAL" VARCHAR2(45), 
	 CONSTRAINT "MATERIALS_PK" PRIMARY KEY ("ABBREVIATION") ENABLE, 
	 CONSTRAINT "MATERIALS_UN" UNIQUE ("PROCESSING_MATERIAL", "PROCESSING", "BASE_MATERIAL") ENABLE
   )
/
CREATE TABLE  "STANDARD_WIRE_GAUGES" 
   (	"SWG_ID" NUMBER NOT NULL ENABLE, 
	"SWG" VARCHAR2(30), 
	"INCH_DIAMETER" NUMBER(10,4), 
	"DIAMETER_MM" NUMBER(10,4), 
	 CONSTRAINT "STANDARD_WIRE_GAUGE_PK" PRIMARY KEY ("SWG_ID") ENABLE, 
	 CONSTRAINT "STANDARD_WIRE_GAUGE_UK" UNIQUE ("SWG") ENABLE
   )
/
CREATE TABLE  "INGREDIENTS" 
   (	"INGREDIENT_ID" NUMBER NOT NULL ENABLE, 
	"MATERIAL" VARCHAR2(45) DEFAULT 'OTHER', 
	"COLOR" VARCHAR2(45) DEFAULT 'NATURAL', 
	"WIRE_DIAMETER_MM" NUMBER(8,2), 
	"INNER_DIAMETER_MM" NUMBER(8,2), 
	"OUTER_DIAMETER_MM" NUMBER(8,2), 
	"ASPECT_RATIO" NUMBER(8,2), 
	"OPENING_DIAMETER_MM" NUMBER(8,2), 
	"INGREDIENT_TYPE" VARCHAR2(45), 
	"WIRE_DIAMETER_SWG" VARCHAR2(30), 
	"WIRE_DIAMETER_AWG" VARCHAR2(30), 
	 CONSTRAINT "INGREDIENTS_PK" PRIMARY KEY ("INGREDIENT_ID") ENABLE
   )
/
CREATE TABLE  "RAW_INGREDIENTS" 
   (	"RAW_INGREDIENT_ID" NUMBER NOT NULL ENABLE, 
	"RAW_INGREDIENT_TYPE" VARCHAR2(45), 
	 CONSTRAINT "RAW_INGREDIENTS_PK" PRIMARY KEY ("RAW_INGREDIENT_ID") ENABLE
   )
/
CREATE TABLE  "CRAFTED_INGREDIENTS" 
   (	"CRAFTED_INGREDIENT_ID" NUMBER NOT NULL ENABLE, 
	"CRAFTED_INGREDIENT_TYPE" VARCHAR2(45), 
	"RAW_INGREDIENT_ID" NUMBER, 
	"RAW_INGREDIENT_WEIGHT_AMOUNT" NUMBER(10,4), 
	 CONSTRAINT "CRAFTED_INGREDIENTS_PK" PRIMARY KEY ("CRAFTED_INGREDIENT_ID") ENABLE
   )
/
CREATE TABLE  "ATTACHMENTS" 
   (	"ATTACHMENT_ID" NUMBER NOT NULL ENABLE, 
	"ATTACHMENT_TYPE" VARCHAR2(45), 
	 CONSTRAINT "ATTACHMENTS_PK" PRIMARY KEY ("ATTACHMENT_ID") ENABLE
   )
/
CREATE TABLE  "ATTACHMENTS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"ATTACHMENT_ID" NUMBER NOT NULL ENABLE, 
	"ATTACHMENT_TYPE" VARCHAR2(45)
   )
/
CREATE TABLE  "BEADS" 
   (	"BEAD_ID" NUMBER NOT NULL ENABLE, 
	"BEAD_TYPE" VARCHAR2(45), 
	 CONSTRAINT "BEADS_PK" PRIMARY KEY ("BEAD_ID") ENABLE
   )
/
CREATE TABLE  "BEADS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"BEAD_ID" NUMBER NOT NULL ENABLE, 
	"BEAD_TYPE" VARCHAR2(45)
   )
/
CREATE TABLE  "CHAINS" 
   (	"CHAIN_ID" NUMBER NOT NULL ENABLE, 
	"CHAIN_TYPE" VARCHAR2(45), 
	 CONSTRAINT "CHAINS_PK" PRIMARY KEY ("CHAIN_ID") ENABLE
   )
/
CREATE TABLE  "CHAINS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"CHAIN_ID" NUMBER NOT NULL ENABLE, 
	"CHAIN_TYPE" VARCHAR2(45)
   )
/
CREATE TABLE  "CLASPS" 
   (	"CLASP_ID" NUMBER NOT NULL ENABLE, 
	"CLASP_TYPE" VARCHAR2(45), 
	 CONSTRAINT "CLASPS_PK" PRIMARY KEY ("CLASP_ID") ENABLE
   )
/
CREATE TABLE  "CLASPS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"CLASP_ID" NUMBER NOT NULL ENABLE, 
	"CLASP_TYPE" VARCHAR2(45)
   )
/
CREATE TABLE  "COLORS" 
   (	"NAME" VARCHAR2(45) NOT NULL ENABLE, 
	"BASE_COLOR" VARCHAR2(45), 
	"TINT" VARCHAR2(45), 
	"COLOR_TYPE" VARCHAR2(45), 
	"ADDED_COLOR" VARCHAR2(45), 
	"PARENT_COLOR" VARCHAR2(45), 
	 CONSTRAINT "COLORS_PK" PRIMARY KEY ("NAME") ENABLE, 
	 CONSTRAINT "COLORS_UN" UNIQUE ("TINT", "COLOR_TYPE", "ADDED_COLOR", "BASE_COLOR") ENABLE
   )
/
CREATE TABLE  "COLORS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"NAME" VARCHAR2(45) NOT NULL ENABLE, 
	"BASE_COLOR" VARCHAR2(45), 
	"TINT" VARCHAR2(45), 
	"COLOR_TYPE" VARCHAR2(45), 
	"ADDED_COLOR" VARCHAR2(45)
   )
/
CREATE TABLE  "CONVERSION_FACTORS" 
   (	"NAME_OF_UNIT" VARCHAR2(45) NOT NULL ENABLE, 
	"SYMBOL" VARCHAR2(45), 
	"DEFINITION" VARCHAR2(500), 
	"METER_FACTOR" VARCHAR2(100), 
	"CONVERSION_TYPE" VARCHAR2(45), 
	 CONSTRAINT "CONVERSION_FACTORS_PK" PRIMARY KEY ("NAME_OF_UNIT") ENABLE
   )
/
CREATE TABLE  "CRAFTED_INGREDIENTS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"CRAFTED_INGREDIENT_ID" NUMBER NOT NULL ENABLE, 
	"CRAFTED_INGREDIENT_TYPE" VARCHAR2(45), 
	"RAW_INGREDIENT_ID" NUMBER, 
	"RAW_INGREDIENT_WEIGHT_AMOUNT" NUMBER(10,4)
   )
/
CREATE TABLE  "CREATED_ITEMS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"CREATED_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"CREATED_ITEM_TYPE" VARCHAR2(45)
   )
/
CREATE TABLE  "DOMAINS" 
   (	"DOMAIN_VALUE_ID" NUMBER NOT NULL ENABLE, 
	"DOMAIN_VALUE" VARCHAR2(100) NOT NULL ENABLE, 
	"DOMAIN_NAME" VARCHAR2(100) NOT NULL ENABLE, 
	"DOMAIN_REFLOC" VARCHAR2(100) DEFAULT 'UNKNOWN' NOT NULL ENABLE, 
	"SORT_ORDER" NUMBER NOT NULL ENABLE, 
	"PARENT_DOMAIN_VALUE_ID" NUMBER, 
	"DESCRIPTION" VARCHAR2(2000), 
	"DOMAIN_TYPE" VARCHAR2(30) DEFAULT 'LIST_OF_VALUES' NOT NULL ENABLE, 
	"ACTIVE" CHAR(1) DEFAULT 'Y' NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(30) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_MODIFIED" VARCHAR2(30) NOT NULL ENABLE, 
	"DATE_MODIFIED" DATE NOT NULL ENABLE, 
	 CONSTRAINT "DOMAINS_PK" PRIMARY KEY ("DOMAIN_VALUE_ID") ENABLE, 
	 CONSTRAINT "DOMAINS_UK" UNIQUE ("DOMAIN_NAME", "DOMAIN_VALUE") ENABLE
   )
/
CREATE TABLE  "DOMAINS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"DOMAIN_VALUE_ID" NUMBER NOT NULL ENABLE, 
	"DOMAIN_VALUE" VARCHAR2(100) NOT NULL ENABLE, 
	"DOMAIN_NAME" VARCHAR2(100) NOT NULL ENABLE, 
	"DOMAIN_REFLOC" VARCHAR2(100) NOT NULL ENABLE, 
	"SORT_ORDER" NUMBER NOT NULL ENABLE, 
	"PARENT_DOMAIN_VALUE_ID" NUMBER, 
	"DESCRIPTION" VARCHAR2(2000), 
	"DOMAIN_TYPE" VARCHAR2(30) NOT NULL ENABLE, 
	"ACTIVE" CHAR(1) NOT NULL ENABLE, 
	"USER_CREATED" VARCHAR2(30) NOT NULL ENABLE, 
	"DATE_CREATED" DATE NOT NULL ENABLE, 
	"USER_MODIFIED" VARCHAR2(30) NOT NULL ENABLE, 
	"DATE_MODIFIED" DATE NOT NULL ENABLE
   )
/
CREATE TABLE  "HTMLDB_PLAN_TABLE" 
   (	"STATEMENT_ID" VARCHAR2(30), 
	"PLAN_ID" NUMBER, 
	"TIMESTAMP" DATE, 
	"REMARKS" VARCHAR2(4000), 
	"OPERATION" VARCHAR2(30), 
	"OPTIONS" VARCHAR2(255), 
	"OBJECT_NODE" VARCHAR2(128), 
	"OBJECT_OWNER" VARCHAR2(30), 
	"OBJECT_NAME" VARCHAR2(30), 
	"OBJECT_ALIAS" VARCHAR2(65), 
	"OBJECT_INSTANCE" NUMBER(*,0), 
	"OBJECT_TYPE" VARCHAR2(30), 
	"OPTIMIZER" VARCHAR2(255), 
	"SEARCH_COLUMNS" NUMBER, 
	"ID" NUMBER(*,0), 
	"PARENT_ID" NUMBER(*,0), 
	"DEPTH" NUMBER(*,0), 
	"POSITION" NUMBER(*,0), 
	"COST" NUMBER(*,0), 
	"CARDINALITY" NUMBER(*,0), 
	"BYTES" NUMBER(*,0), 
	"OTHER_TAG" VARCHAR2(255), 
	"PARTITION_START" VARCHAR2(255), 
	"PARTITION_STOP" VARCHAR2(255), 
	"PARTITION_ID" NUMBER(*,0), 
	"OTHER" LONG, 
	"DISTRIBUTION" VARCHAR2(30), 
	"CPU_COST" NUMBER(*,0), 
	"IO_COST" NUMBER(*,0), 
	"TEMP_SPACE" NUMBER(*,0), 
	"ACCESS_PREDICATES" VARCHAR2(4000), 
	"FILTER_PREDICATES" VARCHAR2(4000), 
	"PROJECTION" VARCHAR2(4000), 
	"TIME" NUMBER(*,0), 
	"QBLOCK_NAME" VARCHAR2(30)
   )
/
CREATE TABLE  "INGREDIENTS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"INGREDIENT_ID" NUMBER NOT NULL ENABLE, 
	"MATERIAL" VARCHAR2(45), 
	"COLOR" VARCHAR2(45), 
	"WIRE_DIAMETER_MM" NUMBER(8,2), 
	"INNER_DIAMETER_MM" NUMBER(8,2), 
	"OUTER_DIAMETER_MM" NUMBER(8,2), 
	"ASPECT_RATIO" NUMBER(8,2), 
	"OPENING_DIAMETER_MM" NUMBER(8,2), 
	"INGREDIENT_TYPE" VARCHAR2(45), 
	"WIRE_DIAMETER_SWG" VARCHAR2(30), 
	"WIRE_DIAMETER_AWG" VARCHAR2(30), 
	"INNER_DIAMETER_INCH" VARCHAR2(45)
   )
/
CREATE TABLE  "ITEMS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"NAME" VARCHAR2(30) NOT NULL ENABLE, 
	"LIST_PRICE" NUMBER(8,2), 
	"AVAILABILITY" VARCHAR2(30), 
	"SALE_STATUS" VARCHAR2(30), 
	"ITEM_TYPE" VARCHAR2(45), 
	"DESCRIPTION" VARCHAR2(2000), 
	"COST_TOTAL" NUMBER(8,2), 
	"TIME_MIN" NUMBER, 
	"LENGTH_MM" NUMBER(8,2), 
	"WIDTH_MM" NUMBER(8,2), 
	"THICKNESS_MM" NUMBER(8,2), 
	"HEIGHT_MM" NUMBER(8,2), 
	"WEIGHT_GR" NUMBER(8,2), 
	"CURRENT_AMOUNT" NUMBER, 
	"PURCHASED_AMOUNT" NUMBER
   )
/
CREATE TABLE  "ITEM_INGREDIENTS" 
   (	"ITEM_INGREDIENT_ID" NUMBER(3,0) NOT NULL ENABLE, 
	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"INGREDIENT_ID" NUMBER NOT NULL ENABLE, 
	"UNIT_PRICE" NUMBER(8,2) DEFAULT 0, 
	"QUANTITY" NUMBER(8,0) DEFAULT 0, 
	 CONSTRAINT "ITEM_INGREDIENTS_PK" PRIMARY KEY ("ITEM_INGREDIENT_ID") ENABLE, 
	 CONSTRAINT "ITEM_INGREDIENTS_UK" UNIQUE ("ITEM_ID", "INGREDIENT_ID") ENABLE
   )
/
CREATE TABLE  "ITEM_INGREDIENTS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"ITEM_INGREDIENT_ID" NUMBER(3,0) NOT NULL ENABLE, 
	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"INGREDIENT_ID" NUMBER NOT NULL ENABLE, 
	"UNIT_PRICE" NUMBER(8,2), 
	"QUANTITY" NUMBER(8,0)
   )
/
CREATE TABLE  "ITEM_ORDER_SOURCES" 
   (	"ITEM_ORDER_SOURCE_ID" NUMBER NOT NULL ENABLE, 
	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"SOURCE_PRODUCTCODE" VARCHAR2(45), 
	"SOURCE_UNIT_PRICE" NUMBER(8,2) DEFAULT 0, 
	"SOURCE_AMOUNT" NUMBER DEFAULT 0, 
	"SOURCE_BRAND" VARCHAR2(500), 
	"SOURCE_ORDER_URL" VARCHAR2(2000), 
	"MODIFIED_DATE" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	 CONSTRAINT "ITEM_ORDER_SOURCES_UN" UNIQUE ("ITEM_ID", "SOURCE_PRODUCTCODE") ENABLE, 
	 CONSTRAINT "ITEM_ORDER_SOURCES_UN2" UNIQUE ("SOURCE_PRODUCTCODE", "SOURCE_BRAND") ENABLE
   )
/
CREATE TABLE  "ITEM_ORDER_SOURCES_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"ITEM_ORDER_SOURCE_ID" NUMBER NOT NULL ENABLE, 
	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"SOURCE_PRODUCTCODE" VARCHAR2(45), 
	"SOURCE_UNIT_PRICE" NUMBER(8,2), 
	"SOURCE_AMOUNT" NUMBER, 
	"SOURCE_BRAND" VARCHAR2(500), 
	"SOURCE_ORDER_URL" VARCHAR2(2000), 
	"MODIFIED_DATE" TIMESTAMP (6) WITH LOCAL TIME ZONE
   )
/
CREATE TABLE  "WEAVES" 
   (	"WEAVE_ID" NUMBER NOT NULL ENABLE, 
	"NAME" VARCHAR2(30), 
	"SYNONYMS" VARCHAR2(2000), 
	"PARENT_WEAVE_ID" NUMBER, 
	"COMPLEXITY" VARCHAR2(30) DEFAULT 'BEGINNER', 
	"DESCRIPTION" VARCHAR2(2000), 
	"SPEED_WEAVE" VARCHAR2(2000), 
	"SOURCE_URL" VARCHAR2(2000), 
	 CONSTRAINT "WEAVES_PK" PRIMARY KEY ("WEAVE_ID") ENABLE, 
	 CONSTRAINT "WEAVES_UK" UNIQUE ("NAME") ENABLE
   )
/
CREATE TABLE  "ITEM_WEAVES" 
   (	"ITEM_WEAVE_ID" NUMBER NOT NULL ENABLE, 
	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"WEAVE_ID" NUMBER NOT NULL ENABLE, 
	"INGREDIENT_ID" NUMBER, 
	"RING_QUANTITY" NUMBER DEFAULT 1, 
	 CONSTRAINT "ITEM_WEAVES_PK" PRIMARY KEY ("ITEM_WEAVE_ID") ENABLE, 
	 CONSTRAINT "ITEM_WEAVES_UK" UNIQUE ("ITEM_ID", "WEAVE_ID", "INGREDIENT_ID") ENABLE
   )
/
CREATE TABLE  "ITEM_WEAVES_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"ITEM_WEAVE_ID" NUMBER NOT NULL ENABLE, 
	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"WEAVE_ID" NUMBER NOT NULL ENABLE, 
	"INGREDIENT_ID" NUMBER, 
	"RING_QUANTITY" NUMBER
   )
/
CREATE TABLE  "JEWELRY" 
   (	"CREATED_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"JEWELRY_TYPE" VARCHAR2(45), 
	 CONSTRAINT "JEWELRY_PK" PRIMARY KEY ("CREATED_ITEM_ID") ENABLE
   )
/
CREATE TABLE  "JEWELRY_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"CREATED_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"JEWELRY_TYPE" VARCHAR2(45)
   )
/
CREATE TABLE  "KITS" 
   (	"KIT_ID" NUMBER NOT NULL ENABLE, 
	"NAME" VARCHAR2(30), 
	"LIST_PRICE" NUMBER(8,2) DEFAULT 0 NOT NULL ENABLE, 
	"AVAILABILITY" VARCHAR2(30) DEFAULT 'IN_STOCK', 
	"SALE_STATUS" VARCHAR2(30) DEFAULT 'NONE', 
	 CONSTRAINT "KITS_PK" PRIMARY KEY ("KIT_ID") ENABLE, 
	 CONSTRAINT "KITS_UK" UNIQUE ("NAME") ENABLE
   )
/
CREATE TABLE  "KITS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"KIT_ID" NUMBER NOT NULL ENABLE, 
	"NAME" VARCHAR2(30), 
	"LIST_PRICE" NUMBER(8,2) NOT NULL ENABLE, 
	"AVAILABILITY" VARCHAR2(30), 
	"SALE_STATUS" VARCHAR2(30)
   )
/
CREATE TABLE  "KIT_ITEMS" 
   (	"KIT_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"KIT_ID" NUMBER NOT NULL ENABLE, 
	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"UNIT_PRICE" NUMBER(8,2) DEFAULT 0 NOT NULL ENABLE, 
	"QUANTITY" NUMBER(8,0) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT "KIT_ITEMS_PK" PRIMARY KEY ("KIT_ITEM_ID") ENABLE, 
	 CONSTRAINT "KIT_ITEMS_UK" UNIQUE ("KIT_ID", "ITEM_ID") ENABLE
   )
/
CREATE TABLE  "KIT_ITEMS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"KIT_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"KIT_ID" NUMBER NOT NULL ENABLE, 
	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"UNIT_PRICE" NUMBER(8,2) NOT NULL ENABLE, 
	"QUANTITY" NUMBER(8,0) NOT NULL ENABLE
   )
/
CREATE TABLE  "LACE" 
   (	"LACE_ID" NUMBER NOT NULL ENABLE, 
	"LACE_TYPE" VARCHAR2(45), 
	 CONSTRAINT "LACE_PK" PRIMARY KEY ("LACE_ID") ENABLE
   )
/
CREATE TABLE  "LACE_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"LACE_ID" NUMBER NOT NULL ENABLE, 
	"LACE_TYPE" VARCHAR2(45)
   )
/
CREATE TABLE  "PERSONS" 
   (	"PERSON_ID" NUMBER NOT NULL ENABLE, 
	"EMAIL" VARCHAR2(30), 
	"PHONE_FIXED" VARCHAR2(30), 
	"IS_COMPETITOR" CHAR(1) NOT NULL ENABLE, 
	"PERSON_TYPE" VARCHAR2(30), 
	 CONSTRAINT "PERSONS_PK" PRIMARY KEY ("PERSON_ID") ENABLE
   )
/
CREATE TABLE  "LEGAL_PERSONS" 
   (	"PERSON_ID" NUMBER NOT NULL ENABLE, 
	"LEGAL_NAME" VARCHAR2(30), 
	"WEBSITE" VARCHAR2(2000), 
	 CONSTRAINT "LEGAL_PERSONS_PK" PRIMARY KEY ("PERSON_ID") ENABLE
   )
/
CREATE TABLE  "LEGAL_PERSONS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"PERSON_ID" NUMBER NOT NULL ENABLE, 
	"LEGAL_NAME" VARCHAR2(30), 
	"WEBSITE" VARCHAR2(2000)
   )
/
CREATE TABLE  "LOCATIONS" 
   (	"LOCATION_ID" NUMBER NOT NULL ENABLE, 
	"PERSON_ID" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "LOCATIONS_PK" PRIMARY KEY ("LOCATION_ID") ENABLE
   )
/
CREATE TABLE  "LOCATIONS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"LOCATION_ID" NUMBER NOT NULL ENABLE, 
	"PERSON_ID" NUMBER NOT NULL ENABLE
   )
/
CREATE TABLE  "LOCATION_ADDRESSES" 
   (	"LOCATION_ADDRESS_ID" NUMBER NOT NULL ENABLE, 
	"LOCATION_ID" NUMBER NOT NULL ENABLE, 
	"STREET" VARCHAR2(255), 
	"NR" NUMBER, 
	"NR_ADDITION" VARCHAR2(5), 
	"CITY" VARCHAR2(50), 
	"COUNTRY" VARCHAR2(50), 
	"POSTAL_CODE" VARCHAR2(12), 
	"LATITUDE" NUMBER(9,6), 
	"LONGITUDE" NUMBER(9,6), 
	"IS_MAIN" CHAR(1), 
	"IS_ACTIVE" CHAR(1), 
	"ADDRESS_TYPE" VARCHAR2(30), 
	 CONSTRAINT "LOCATION_ADDRESSES_PK" PRIMARY KEY ("LOCATION_ADDRESS_ID") ENABLE
   )
/
CREATE TABLE  "LOCATION_ADDRESSES_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"LOCATION_ADDRESS_ID" NUMBER NOT NULL ENABLE, 
	"LOCATION_ID" NUMBER NOT NULL ENABLE, 
	"STREET" VARCHAR2(255), 
	"NR" NUMBER, 
	"NR_ADDITION" VARCHAR2(5), 
	"CITY" VARCHAR2(50), 
	"COUNTRY" VARCHAR2(50), 
	"POSTAL_CODE" VARCHAR2(12), 
	"LATITUDE" NUMBER(9,6), 
	"LONGITUDE" NUMBER(9,6), 
	"IS_MAIN" CHAR(1), 
	"IS_ACTIVE" CHAR(1), 
	"ADDRESS_TYPE" VARCHAR2(30)
   )
/
CREATE TABLE  "MATERIALS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"ABBREVIATION" VARCHAR2(45) NOT NULL ENABLE, 
	"BASE_MATERIAL" VARCHAR2(45), 
	"PROCESSING" VARCHAR2(45), 
	"PROCESSING_MATERIAL" VARCHAR2(45), 
	"ALLERGENS_EXCLUDED" VARCHAR2(45), 
	"BASE_MATERIALS_INCLUDED" VARCHAR2(2000), 
	"PARENT_MATERIAL" VARCHAR2(45)
   )
/
CREATE TABLE  "NATURAL_PERSONS" 
   (	"PERSON_ID" NUMBER NOT NULL ENABLE, 
	"FIRST_NAME" VARCHAR2(30), 
	"LAST_NAME" VARCHAR2(30), 
	 CONSTRAINT "NATURAL_PERSONS_PK" PRIMARY KEY ("PERSON_ID") ENABLE
   )
/
CREATE TABLE  "NATURAL_PERSONS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"PERSON_ID" NUMBER NOT NULL ENABLE, 
	"FIRST_NAME" VARCHAR2(30), 
	"LAST_NAME" VARCHAR2(30)
   )
/
CREATE TABLE  "ORDERS" 
   (	"ORDER_ID" NUMBER NOT NULL ENABLE, 
	"LOCATION_ADDRESS_ID" NUMBER, 
	"PERSON_ID" NUMBER, 
	"ORDER_TYPE" VARCHAR2(30) DEFAULT 'SALE' NOT NULL ENABLE, 
	"ORDER_DATE" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"SHIPPING" NUMBER(10,2), 
	"IS_ONLINE" CHAR(1), 
	 CONSTRAINT "ORDERS_PK" PRIMARY KEY ("ORDER_ID") ENABLE
   )
/
CREATE TABLE  "ORDERS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"ORDER_ID" NUMBER NOT NULL ENABLE, 
	"LOCATION_ADDRESS_ID" NUMBER, 
	"PERSON_ID" NUMBER, 
	"ORDER_TYPE" VARCHAR2(30) NOT NULL ENABLE, 
	"ORDER_DATE" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"SHIPPING" NUMBER(10,2), 
	"IS_ONLINE" CHAR(1)
   )
/
CREATE TABLE  "ORDER_ITEMS" 
   (	"ORDER_ITEM_ID" NUMBER(3,0) NOT NULL ENABLE, 
	"ORDER_ID" NUMBER NOT NULL ENABLE, 
	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"UNIT_PRICE" NUMBER(8,2) DEFAULT 0 NOT NULL ENABLE, 
	"QUANTITY" NUMBER(8,0) DEFAULT 1 NOT NULL ENABLE, 
	"ITEM_STATUS" VARCHAR2(30) DEFAULT 'NOT_MADE' NOT NULL ENABLE, 
	"ORDER_ITEM_URL" VARCHAR2(2000), 
	 CONSTRAINT "ORDER_ITEMS_PK" PRIMARY KEY ("ORDER_ITEM_ID") ENABLE, 
	 CONSTRAINT "ORDER_ITEMS_UK" UNIQUE ("ORDER_ID", "ITEM_ID") ENABLE, 
	 CONSTRAINT "ORDER_ITEMS_UK2" UNIQUE ("ORDER_ID", "ORDER_ITEM_ID") ENABLE
   )
/
CREATE TABLE  "ORDER_ITEMS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"ORDER_ITEM_ID" NUMBER(3,0) NOT NULL ENABLE, 
	"ORDER_ID" NUMBER NOT NULL ENABLE, 
	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"UNIT_PRICE" NUMBER(8,2) NOT NULL ENABLE, 
	"QUANTITY" NUMBER(8,0) NOT NULL ENABLE, 
	"ITEM_STATUS" VARCHAR2(30) NOT NULL ENABLE, 
	"ORDER_ITEM_URL" VARCHAR2(2000)
   )
/
CREATE TABLE  "ORNAMENTS" 
   (	"CREATED_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"ORNAMENT_TYPE" VARCHAR2(45), 
	 CONSTRAINT "ORNAMENTS_PK" PRIMARY KEY ("CREATED_ITEM_ID") ENABLE
   )
/
CREATE TABLE  "ORNAMENTS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"CREATED_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"ORNAMENT_TYPE" VARCHAR2(45)
   )
/
CREATE TABLE  "OTHER_INGREDIENTS" 
   (	"OTHER_INGREDIENT_ID" NUMBER NOT NULL ENABLE, 
	"OTHER_INGREDIENT_TYPE" VARCHAR2(45), 
	 CONSTRAINT "OTHER_INGREDIENTS_PK" PRIMARY KEY ("OTHER_INGREDIENT_ID") ENABLE
   )
/
CREATE TABLE  "OTHER_INGREDIENTS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"OTHER_INGREDIENT_ID" NUMBER NOT NULL ENABLE, 
	"OTHER_INGREDIENT_TYPE" VARCHAR2(45)
   )
/
CREATE TABLE  "OTHER_ITEMS" 
   (	"OTHER_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"OTHER_ITEM_TYPE" VARCHAR2(45), 
	 CONSTRAINT "OTHER_ITEMS_PK" PRIMARY KEY ("OTHER_ITEM_ID") ENABLE
   )
/
CREATE TABLE  "OTHER_ITEMS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"OTHER_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"OTHER_ITEM_TYPE" VARCHAR2(45)
   )
/
CREATE TABLE  "PERSONS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"PERSON_ID" NUMBER NOT NULL ENABLE, 
	"EMAIL" VARCHAR2(30), 
	"PHONE_FIXED" VARCHAR2(30), 
	"IS_COMPETITOR" CHAR(1) NOT NULL ENABLE, 
	"PERSON_TYPE" VARCHAR2(30)
   )
/
CREATE TABLE  "PURCHASES" 
   (	"ORDER_ID" NUMBER NOT NULL ENABLE, 
	"ORDER_STATUS" VARCHAR2(45) NOT NULL ENABLE, 
	"TAX_RETURNED" CHAR(1), 
	 CONSTRAINT "PURCHASES_PK" PRIMARY KEY ("ORDER_ID") ENABLE
   )
/
CREATE TABLE  "PURCHASES_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"ORDER_ID" NUMBER NOT NULL ENABLE, 
	"ORDER_STATUS" VARCHAR2(45) NOT NULL ENABLE, 
	"TAX_RETURNED" CHAR(1)
   )
/
CREATE TABLE  "RAW_INGREDIENTS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"RAW_INGREDIENT_ID" NUMBER NOT NULL ENABLE, 
	"RAW_INGREDIENT_TYPE" VARCHAR2(45)
   )
/
CREATE TABLE  "RINGS" 
   (	"RING_ID" NUMBER NOT NULL ENABLE, 
	"RING_TYPE" VARCHAR2(45), 
	 CONSTRAINT "RINGS_PK" PRIMARY KEY ("RING_ID") ENABLE
   )
/
CREATE TABLE  "RINGS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"RING_ID" NUMBER NOT NULL ENABLE, 
	"RING_TYPE" VARCHAR2(45)
   )
/
CREATE TABLE  "SALES" 
   (	"ORDER_ID" NUMBER NOT NULL ENABLE, 
	"INVOICE_YEAR" VARCHAR2(4), 
	"INVOICE_QUARTER" VARCHAR2(3), 
	"INVOICE_NUMBER" VARCHAR2(45), 
	"ORDER_STATUS" VARCHAR2(45) NOT NULL ENABLE, 
	"COMPLETE_DATE" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	 CONSTRAINT "SALES_PK" PRIMARY KEY ("ORDER_ID") ENABLE
   )
/
CREATE TABLE  "SALES_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"ORDER_ID" NUMBER NOT NULL ENABLE, 
	"INVOICE_YEAR" VARCHAR2(4), 
	"INVOICE_QUARTER" VARCHAR2(3), 
	"INVOICE_NUMBER" VARCHAR2(45), 
	"ORDER_STATUS" VARCHAR2(45) NOT NULL ENABLE, 
	"COMPLETE_DATE" TIMESTAMP (6) WITH LOCAL TIME ZONE
   )
/
CREATE TABLE  "SCALES" 
   (	"SCALE_ID" NUMBER NOT NULL ENABLE, 
	"SCALE_TYPE" VARCHAR2(45), 
	 CONSTRAINT "SCALES_PK" PRIMARY KEY ("SCALE_ID") ENABLE
   )
/
CREATE TABLE  "SCALES_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"SCALE_ID" NUMBER NOT NULL ENABLE, 
	"SCALE_TYPE" VARCHAR2(45)
   )
/
CREATE TABLE  "SETS" 
   (	"SET_ID" NUMBER NOT NULL ENABLE, 
	"NAME" VARCHAR2(45), 
	"LIST_PRICE" NUMBER(8,2) DEFAULT 0 NOT NULL ENABLE, 
	"AVAILABILITY" VARCHAR2(45) DEFAULT 'IN_STOCK', 
	"SALE_STATUS" VARCHAR2(45) DEFAULT 'NONE', 
	 CONSTRAINT "SETS_PK" PRIMARY KEY ("SET_ID") ENABLE, 
	 CONSTRAINT "SETS_UK" UNIQUE ("NAME") ENABLE
   )
/
CREATE TABLE  "SETS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"SET_ID" NUMBER NOT NULL ENABLE, 
	"NAME" VARCHAR2(45), 
	"LIST_PRICE" NUMBER(8,2) NOT NULL ENABLE, 
	"AVAILABILITY" VARCHAR2(45), 
	"SALE_STATUS" VARCHAR2(45)
   )
/
CREATE TABLE  "SET_ITEMS" 
   (	"SET_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"SET_ID" NUMBER NOT NULL ENABLE, 
	"CREATED_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"UNIT_PRICE" NUMBER(8,2) DEFAULT 0 NOT NULL ENABLE, 
	"QUANTITY" NUMBER(8,0) DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT "SET_ITEMS_PK" PRIMARY KEY ("SET_ITEM_ID") ENABLE, 
	 CONSTRAINT "SET_ITEMS_UK" UNIQUE ("SET_ID", "CREATED_ITEM_ID") ENABLE
   )
/
CREATE TABLE  "SET_ITEMS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"SET_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"SET_ID" NUMBER NOT NULL ENABLE, 
	"CREATED_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"UNIT_PRICE" NUMBER(8,2) NOT NULL ENABLE, 
	"QUANTITY" NUMBER(8,0) NOT NULL ENABLE
   )
/
CREATE TABLE  "STANDARD_WIRE_GAUGES_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"SWG_ID" NUMBER NOT NULL ENABLE, 
	"SWG" VARCHAR2(30), 
	"INCH_DIAMETER" NUMBER(10,4), 
	"DIAMETER_MM" NUMBER(10,4)
   )
/
CREATE TABLE  "STORES" 
   (	"STORE_ID" NUMBER NOT NULL ENABLE, 
	"NAME" VARCHAR2(255), 
	"WEBSITE" VARCHAR2(2000), 
	"OPEN_DATE" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"STORE_TYPE" VARCHAR2(50), 
	"LOCATION_ADDRESS_ID" NUMBER NOT NULL ENABLE, 
	"LEGAL_PERSON_ID" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "STORES_PK" PRIMARY KEY ("STORE_ID") ENABLE
   )
/
CREATE TABLE  "STORES_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"STORE_ID" NUMBER NOT NULL ENABLE, 
	"NAME" VARCHAR2(255), 
	"WEBSITE" VARCHAR2(2000), 
	"OPEN_DATE" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"STORE_TYPE" VARCHAR2(50), 
	"LOCATION_ADDRESS_ID" NUMBER NOT NULL ENABLE, 
	"LEGAL_PERSON_ID" NUMBER NOT NULL ENABLE
   )
/
CREATE TABLE  "STORE_ITEMS" 
   (	"STORE_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"STORE_ID" NUMBER NOT NULL ENABLE, 
	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"UNIT_PRICE" NUMBER(8,2) DEFAULT 0 NOT NULL ENABLE, 
	"SALE_START_DATE" DATE, 
	"DISCOUNT_PCT" NUMBER(4,2), 
	"SALE_END_DATE" DATE, 
	 CONSTRAINT "STORE_ITEMS_PK" PRIMARY KEY ("STORE_ITEM_ID") ENABLE, 
	 CONSTRAINT "STORE_ITEMS_UK" UNIQUE ("STORE_ID", "ITEM_ID") ENABLE
   )
/
CREATE TABLE  "STORE_ITEMS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"STORE_ITEM_ID" NUMBER NOT NULL ENABLE, 
	"STORE_ID" NUMBER NOT NULL ENABLE, 
	"ITEM_ID" NUMBER NOT NULL ENABLE, 
	"UNIT_PRICE" NUMBER(8,2) NOT NULL ENABLE, 
	"SALE_START_DATE" DATE, 
	"DISCOUNT_PCT" NUMBER(4,2), 
	"SALE_END_DATE" DATE
   )
/
CREATE TABLE  "TOOLS" 
   (	"TOOL_ID" NUMBER NOT NULL ENABLE, 
	"TOOL_TYPE" VARCHAR2(45), 
	 CONSTRAINT "TOOLS_PK" PRIMARY KEY ("TOOL_ID") ENABLE
   )
/
CREATE TABLE  "TOOLS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"TOOL_ID" NUMBER NOT NULL ENABLE, 
	"TOOL_TYPE" VARCHAR2(45)
   )
/
CREATE TABLE  "WEAVES_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"WEAVE_ID" NUMBER NOT NULL ENABLE, 
	"NAME" VARCHAR2(30), 
	"SYNONYMS" VARCHAR2(2000), 
	"PARENT_WEAVE_ID" NUMBER, 
	"COMPLEXITY" VARCHAR2(30), 
	"DESCRIPTION" VARCHAR2(2000), 
	"SPEED_WEAVE" VARCHAR2(2000), 
	"SOURCE_URL" VARCHAR2(2000)
   )
/
CREATE TABLE  "WEAVE_ARS" 
   (	"WEAVE_AR_ID" NUMBER NOT NULL ENABLE, 
	"WEAVE_ID" NUMBER NOT NULL ENABLE, 
	"OPTIMAL_AR" NUMBER(8,2), 
	"MIN_AR" NUMBER(8,2), 
	"MAX_AR" NUMBER(8,2), 
	"AR_SORT_ORDER" NUMBER(8,0), 
	 CONSTRAINT "WEAVE_ARS_PK" PRIMARY KEY ("WEAVE_AR_ID") ENABLE, 
	 CONSTRAINT "WEAVE_ARS_UK" UNIQUE ("WEAVE_ID", "OPTIMAL_AR") ENABLE
   )
/
CREATE TABLE  "WEAVE_ARS_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"WEAVE_AR_ID" NUMBER NOT NULL ENABLE, 
	"WEAVE_ID" NUMBER NOT NULL ENABLE, 
	"OPTIMAL_AR" NUMBER(8,2), 
	"MIN_AR" NUMBER(8,2), 
	"MAX_AR" NUMBER(8,2), 
	"AR_SORT_ORDER" NUMBER(8,0)
   )
/
CREATE TABLE  "WIRES" 
   (	"WIRE_ID" NUMBER NOT NULL ENABLE, 
	"WIRE_TYPE" VARCHAR2(45), 
	 CONSTRAINT "WIRES_PK" PRIMARY KEY ("WIRE_ID") ENABLE
   )
/
CREATE TABLE  "WIRES_JN" 
   (	"JN_OPERATION" CHAR(3) NOT NULL ENABLE, 
	"JN_ORACLE_USER" VARCHAR2(30) NOT NULL ENABLE, 
	"JN_DATETIME" DATE NOT NULL ENABLE, 
	"JN_NOTES" VARCHAR2(240), 
	"JN_APPLN" VARCHAR2(35), 
	"JN_SESSION" NUMBER(38,0), 
	"WIRE_ID" NUMBER NOT NULL ENABLE, 
	"WIRE_TYPE" VARCHAR2(45)
   )
/
ALTER TABLE  "ACCESSORIES" ADD CONSTRAINT "ACCESSORIES_FK" FOREIGN KEY ("CREATED_ITEM_ID")
	  REFERENCES  "CREATED_ITEMS" ("CREATED_ITEM_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "ATTACHMENTS" ADD CONSTRAINT "ATTACHMENTS_FK" FOREIGN KEY ("ATTACHMENT_ID")
	  REFERENCES  "CRAFTED_INGREDIENTS" ("CRAFTED_INGREDIENT_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "BEADS" ADD CONSTRAINT "BEADS_FK" FOREIGN KEY ("BEAD_ID")
	  REFERENCES  "CRAFTED_INGREDIENTS" ("CRAFTED_INGREDIENT_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "CHAINS" ADD CONSTRAINT "CHAINS_FK" FOREIGN KEY ("CHAIN_ID")
	  REFERENCES  "RAW_INGREDIENTS" ("RAW_INGREDIENT_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "CLASPS" ADD CONSTRAINT "CLASPS_FK" FOREIGN KEY ("CLASP_ID")
	  REFERENCES  "CRAFTED_INGREDIENTS" ("CRAFTED_INGREDIENT_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "COLORS" ADD CONSTRAINT "COLORS_FK" FOREIGN KEY ("PARENT_COLOR")
	  REFERENCES  "COLORS" ("NAME") ENABLE
/
ALTER TABLE  "CRAFTED_INGREDIENTS" ADD CONSTRAINT "CRAFTED_INGREDIENTS_FK" FOREIGN KEY ("CRAFTED_INGREDIENT_ID")
	  REFERENCES  "INGREDIENTS" ("INGREDIENT_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "CRAFTED_INGREDIENTS" ADD CONSTRAINT "CRAFTED_INGREDIENTS_FK2" FOREIGN KEY ("RAW_INGREDIENT_ID")
	  REFERENCES  "RAW_INGREDIENTS" ("RAW_INGREDIENT_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "CREATED_ITEMS" ADD CONSTRAINT "CREATED_ITEMS_FK" FOREIGN KEY ("CREATED_ITEM_ID")
	  REFERENCES  "ITEMS" ("ITEM_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "DOMAINS" ADD CONSTRAINT "DOMAINS_FK" FOREIGN KEY ("PARENT_DOMAIN_VALUE_ID")
	  REFERENCES  "DOMAINS" ("DOMAIN_VALUE_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "INGREDIENTS" ADD CONSTRAINT "INGREDIENTS_FK" FOREIGN KEY ("INGREDIENT_ID")
	  REFERENCES  "ITEMS" ("ITEM_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "INGREDIENTS" ADD CONSTRAINT "INGREDIENTS_FK2" FOREIGN KEY ("WIRE_DIAMETER_SWG")
	  REFERENCES  "STANDARD_WIRE_GAUGES" ("SWG") ENABLE
/
ALTER TABLE  "INGREDIENTS" ADD CONSTRAINT "INGREDIENTS_FK3" FOREIGN KEY ("WIRE_DIAMETER_AWG")
	  REFERENCES  "AMERICAN_WIRE_GAUGES" ("AWG") ENABLE
/
ALTER TABLE  "INGREDIENTS" ADD CONSTRAINT "INGREDIENTS_FK5" FOREIGN KEY ("MATERIAL")
	  REFERENCES  "MATERIALS" ("ABBREVIATION") ENABLE
/
ALTER TABLE  "INGREDIENTS" ADD CONSTRAINT "INGREDIENTS_FK6" FOREIGN KEY ("COLOR")
	  REFERENCES  "COLORS" ("NAME") ENABLE
/
ALTER TABLE  "ITEM_INGREDIENTS" ADD CONSTRAINT "ITEM_INGREDIENTS_FK" FOREIGN KEY ("ITEM_ID")
	  REFERENCES  "ITEMS" ("ITEM_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "ITEM_INGREDIENTS" ADD CONSTRAINT "ITEM_INGREDIENTS_FK2" FOREIGN KEY ("INGREDIENT_ID")
	  REFERENCES  "INGREDIENTS" ("INGREDIENT_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "ITEM_ORDER_SOURCES" ADD CONSTRAINT "ITEM_ORDER_SOURCES_FK" FOREIGN KEY ("ITEM_ID")
	  REFERENCES  "ITEMS" ("ITEM_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "ITEM_WEAVES" ADD CONSTRAINT "ITEM_WEAVES_FK" FOREIGN KEY ("WEAVE_ID")
	  REFERENCES  "WEAVES" ("WEAVE_ID") ON DELETE CASCADE DISABLE
/
ALTER TABLE  "ITEM_WEAVES" ADD CONSTRAINT "ITEM_WEAVES_FK2" FOREIGN KEY ("ITEM_ID")
	  REFERENCES  "ITEMS" ("ITEM_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "ITEM_WEAVES" ADD CONSTRAINT "ITEM_WEAVES_FK3" FOREIGN KEY ("INGREDIENT_ID")
	  REFERENCES  "INGREDIENTS" ("INGREDIENT_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "JEWELRY" ADD CONSTRAINT "JEWELRY_FK" FOREIGN KEY ("CREATED_ITEM_ID")
	  REFERENCES  "CREATED_ITEMS" ("CREATED_ITEM_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "KITS" ADD CONSTRAINT "KITS_FK" FOREIGN KEY ("KIT_ID")
	  REFERENCES  "ITEMS" ("ITEM_ID") ENABLE
/
ALTER TABLE  "KIT_ITEMS" ADD CONSTRAINT "KIT_ITEMS_FK" FOREIGN KEY ("KIT_ID")
	  REFERENCES  "KITS" ("KIT_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "KIT_ITEMS" ADD CONSTRAINT "KIT_ITEMS_FK2" FOREIGN KEY ("ITEM_ID")
	  REFERENCES  "ITEMS" ("ITEM_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "LACE" ADD CONSTRAINT "LACE_FK" FOREIGN KEY ("LACE_ID")
	  REFERENCES  "RAW_INGREDIENTS" ("RAW_INGREDIENT_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "LEGAL_PERSONS" ADD CONSTRAINT "LEGAL_PERSONS_FK" FOREIGN KEY ("PERSON_ID")
	  REFERENCES  "PERSONS" ("PERSON_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "LOCATIONS" ADD CONSTRAINT "LOCATIONS_FK" FOREIGN KEY ("PERSON_ID")
	  REFERENCES  "PERSONS" ("PERSON_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "MATERIALS" ADD CONSTRAINT "MATERIALS_FK" FOREIGN KEY ("PARENT_MATERIAL")
	  REFERENCES  "MATERIALS" ("ABBREVIATION") ENABLE
/
ALTER TABLE  "NATURAL_PERSONS" ADD CONSTRAINT "NATURAL_PERSONS_FK" FOREIGN KEY ("PERSON_ID")
	  REFERENCES  "PERSONS" ("PERSON_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "ORDERS" ADD CONSTRAINT "ORDERS_FK" FOREIGN KEY ("PERSON_ID")
	  REFERENCES  "PERSONS" ("PERSON_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "ORDERS" ADD CONSTRAINT "ORDERS_FK2" FOREIGN KEY ("LOCATION_ADDRESS_ID")
	  REFERENCES  "LOCATION_ADDRESSES" ("LOCATION_ADDRESS_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "ORDER_ITEMS" ADD CONSTRAINT "ORDER_ITEMS_FK" FOREIGN KEY ("ORDER_ID")
	  REFERENCES  "ORDERS" ("ORDER_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "ORDER_ITEMS" ADD CONSTRAINT "ORDER_ITEMS_FK2" FOREIGN KEY ("ITEM_ID")
	  REFERENCES  "ITEMS" ("ITEM_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "ORNAMENTS" ADD CONSTRAINT "ORNAMENTS_FK" FOREIGN KEY ("CREATED_ITEM_ID")
	  REFERENCES  "CREATED_ITEMS" ("CREATED_ITEM_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "OTHER_INGREDIENTS" ADD CONSTRAINT "OTHER_INGREDIENTS_FK" FOREIGN KEY ("OTHER_INGREDIENT_ID")
	  REFERENCES  "INGREDIENTS" ("INGREDIENT_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "OTHER_ITEMS" ADD CONSTRAINT "OTHER_ITEMS_FK" FOREIGN KEY ("OTHER_ITEM_ID")
	  REFERENCES  "ITEMS" ("ITEM_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "PURCHASES" ADD CONSTRAINT "PURCHASES_FK" FOREIGN KEY ("ORDER_ID")
	  REFERENCES  "ORDERS" ("ORDER_ID") ENABLE
/
ALTER TABLE  "RAW_INGREDIENTS" ADD CONSTRAINT "RAW_INGREDIENTS_FK" FOREIGN KEY ("RAW_INGREDIENT_ID")
	  REFERENCES  "INGREDIENTS" ("INGREDIENT_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "RINGS" ADD CONSTRAINT "RINGS_FK" FOREIGN KEY ("RING_ID")
	  REFERENCES  "CRAFTED_INGREDIENTS" ("CRAFTED_INGREDIENT_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "SALES" ADD CONSTRAINT "SALES_FK" FOREIGN KEY ("ORDER_ID")
	  REFERENCES  "ORDERS" ("ORDER_ID") ENABLE
/
ALTER TABLE  "SCALES" ADD CONSTRAINT "SCALES_FK" FOREIGN KEY ("SCALE_ID")
	  REFERENCES  "CRAFTED_INGREDIENTS" ("CRAFTED_INGREDIENT_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "SETS" ADD CONSTRAINT "SETS_ITEMS_FK" FOREIGN KEY ("SET_ID")
	  REFERENCES  "ITEMS" ("ITEM_ID") ENABLE
/
ALTER TABLE  "SET_ITEMS" ADD CONSTRAINT "SET_ITEMS_FK" FOREIGN KEY ("SET_ID")
	  REFERENCES  "SETS" ("SET_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "SET_ITEMS" ADD CONSTRAINT "SET_ITEMS_FK2" FOREIGN KEY ("CREATED_ITEM_ID")
	  REFERENCES  "CREATED_ITEMS" ("CREATED_ITEM_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "STORES" ADD CONSTRAINT "STORES_FK" FOREIGN KEY ("LOCATION_ADDRESS_ID")
	  REFERENCES  "LOCATION_ADDRESSES" ("LOCATION_ADDRESS_ID") ENABLE
/
ALTER TABLE  "STORES" ADD CONSTRAINT "STORES_FK2" FOREIGN KEY ("LEGAL_PERSON_ID")
	  REFERENCES  "LEGAL_PERSONS" ("PERSON_ID") ENABLE
/
ALTER TABLE  "STORE_ITEMS" ADD CONSTRAINT "STORE_ITEMS_FK" FOREIGN KEY ("ITEM_ID")
	  REFERENCES  "ITEMS" ("ITEM_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "STORE_ITEMS" ADD CONSTRAINT "STORE_ITEMS_FK2" FOREIGN KEY ("STORE_ID")
	  REFERENCES  "STORES" ("STORE_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "TOOLS" ADD CONSTRAINT "TOOLS_FK" FOREIGN KEY ("TOOL_ID")
	  REFERENCES  "ITEMS" ("ITEM_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "WEAVES" ADD CONSTRAINT "WEAVES_FK" FOREIGN KEY ("PARENT_WEAVE_ID")
	  REFERENCES  "WEAVES" ("WEAVE_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "WEAVE_ARS" ADD CONSTRAINT "WEAVE_ARS_FK" FOREIGN KEY ("WEAVE_ID")
	  REFERENCES  "WEAVES" ("WEAVE_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "WIRES" ADD CONSTRAINT "WIRES_FK" FOREIGN KEY ("WIRE_ID")
	  REFERENCES  "RAW_INGREDIENTS" ("RAW_INGREDIENT_ID") ON DELETE CASCADE ENABLE
/
CREATE INDEX  "CONVERSION_FACTORS_IX" ON  "CONVERSION_FACTORS" ("CONVERSION_TYPE")
/
CREATE INDEX  "INGREDIENTS_IX" ON  "INGREDIENTS" ("MATERIAL")
/
CREATE INDEX  "INGREDIENTS_IX2" ON  "INGREDIENTS" ("COLOR")
/
CREATE INDEX  "ITEMS_IX" ON  "ITEMS" ("SALE_STATUS")
/
CREATE INDEX  "ITEMS_IX2" ON  "ITEMS" ("ITEM_TYPE")
/
CREATE UNIQUE INDEX  "ITEM_ORDER_SOURCES_PK" ON  "ITEM_ORDER_SOURCES" ("ITEM_ID")
/
CREATE UNIQUE INDEX  "LEGAL_PERSONS_IX" ON  "LEGAL_PERSONS" ("LEGAL_NAME")
/
CREATE INDEX  "LOCATION_ADDRESSES_IX" ON  "LOCATION_ADDRESSES" ("CITY")
/
CREATE INDEX  "NATURAL_PERSONS_IX" ON  "NATURAL_PERSONS" ("LAST_NAME", "FIRST_NAME")
/
CREATE UNIQUE INDEX  "ORDER_ITEMS_UK2" ON  "ORDER_ITEMS" ("ORDER_ID")
/
CREATE UNIQUE INDEX  "SALES_IX" ON  "SALES" ("INVOICE_YEAR", "INVOICE_QUARTER", "INVOICE_NUMBER")
/
CREATE OR REPLACE PACKAGE  "MWD_BO_P1010_PKG" as

	procedure init_page;
    
end MWD_BO_P1010_PKG;
/
CREATE OR REPLACE PACKAGE BODY  "MWD_BO_P1010_PKG" as

-- DECLARE PRIVATE SPECIFICATIONS
    procedure fetch_rows;

-- PUBLIC BODY
	procedure init_page
	is
	begin
			APEX_UTIL.set_session_state(
				  p_name  => 'P_PERSON_TYPE_LOV'				, p_value => 'PERSON_TYPE');			
			APEX_UTIL.set_session_state(
				  p_name  => 'P_ADDRESS_TYPE_LOV'				, p_value => 'ADDRESS_TYPE');                     
            
			fetch_rows();
	end init_page;
	
-- PRIVATE BODY
    procedure fetch_rows
    is
        v_exists            number;
	    v_person_id 		persons.person_id%type;
        v_person_type		persons.person_type%type;
		v_natural_person 	natural_persons%rowtype;
		v_legal_person		legal_persons%rowtype;
		v_location_id		locations.location_id%type;
    begin
		v_person_id := APEX_UTIL.get_session_state('P1010_PERSON_ID');		
		IF (v_person_id is not null)
			THEN
                 SELECT person_type
					INTO v_person_type
					FROM persons
					WHERE person_id = v_person_id;
                 
				-- Manual Fetch Row Natural Persons or Legal Persons
				IF (v_person_type = 'NATURAL_PERSON')					THEN
                        SELECT count(*)
                        into v_exists
            			FROM NATURAL_PERSONS 
			            WHERE person_id = v_person_id;
                        
                        if v_exists <> 0                            then
                                SELECT *
                                INTO v_natural_person
                                FROM NATURAL_PERSONS 
                                WHERE PERSON_ID = v_person_id;

                                APEX_UTIL.set_session_state(
                                    p_name  => 'P1010_FIRST_NAME'                                  , p_value => v_natural_person.first_name);                                APEX_UTIL.set_session_state(
                                    p_name  => 'P1010_LAST_NAME'                                  , p_value => v_natural_person.last_name);                         end if;
				ELSIF (v_person_type = 'LEGAL_PERSON')					THEN
						SELECT count(*)
                        into v_exists
   						FROM LEGAL_PERSONS 
               			WHERE person_id = v_person_id;
                        
                        if v_exists <> 0                            then                            
                                SELECT *
                                INTO v_legal_person
                                FROM LEGAL_PERSONS 
                                WHERE person_id = v_person_id;   

                                APEX_UTIL.set_session_state(
                                    p_name  => 'P1010_LEGAL_NAME'                                  , p_value => v_legal_person.legal_name);                                APEX_UTIL.set_session_state(
                                    p_name  => 'P1010_WEBSITE'                                  , p_value => v_legal_person.website);                       end if;
                   END IF;
				
			-- Manual Fetch Row Locations		
			SELECT count(*)
            INTO v_exists
            FROM LOCATIONS 
			WHERE person_id = v_person_id;
            
            if v_exists <> 0                then   
                    SELECT location_id
                    into v_location_id
                    from locations
                    where person_id = v_person_id;

                    APEX_UTIL.set_session_state(
                        p_name  => 'P1010_LOCATION_ID'                      , p_value => v_location_id);           end if;
		END IF;
    end fetch_rows;

end MWD_BO_P1010_PKG;
/

CREATE OR REPLACE PACKAGE  "MWD_BO_P2010_PKG" as

	procedure init_page;

end MWD_BO_P2010_PKG;
/
CREATE OR REPLACE PACKAGE BODY  "MWD_BO_P2010_PKG" as

	procedure init_page
	is
      v_domain_name varchar2(100);
	begin
			APEX_UTIL.set_session_state(
				  p_name  => 'P_ITEM_TYPE_LOV'
				, p_value => 'ITEM_TYPE');

			APEX_UTIL.set_session_state(
				  p_name  => 'P_ITEM_AVAILABILITY_LOV'
				, p_value => 'ITEM_AVAILABILITY');

			APEX_UTIL.set_session_state(
				  p_name  => 'P_ITEM_SALE_STATUS_LOV'
				, p_value => 'ITEM_SALE_STATUS');
	end init_page;

end MWD_BO_P2010_PKG;
/

CREATE OR REPLACE PACKAGE  "MWD_BO_P2110_PKG" as

	procedure init_page;

end MWD_BO_P2110_PKG;

/
CREATE OR REPLACE PACKAGE BODY  "MWD_BO_P2110_PKG" as

	procedure init_page
	is
      v_domain_name varchar2(100);
	begin
			APEX_UTIL.set_session_state(
				  p_name  => 'P_INGREDIENT_TYPE_LOV'				, p_value => 'INGREDIENT_TYPE');			
--			APEX_UTIL.set_session_state(
--				  p_name  => 'P_MATERIAL_LOV'--				, p_value => 'MATERIAL');
--			APEX_UTIL.set_session_state(
--				  p_name  => 'P_COLOR_LOV'--				, p_value => 'COLOR');	end init_page;
	
end MWD_BO_P2110_PKG;
/

CREATE OR REPLACE PACKAGE  "MWD_BO_P3010_PKG" as

	procedure init_page;

end MWD_BO_P3010_PKG;
/
CREATE OR REPLACE PACKAGE BODY  "MWD_BO_P3010_PKG" as

	procedure init_page
	is
      v_domain_name varchar2(100);
	begin
			APEX_UTIL.set_session_state(
				  p_name  => 'P_ORDER_TYPE_LOV'
				, p_value => 'ORDER_TYPE');

	end init_page;

end MWD_BO_P3010_PKG;
/

CREATE OR REPLACE PACKAGE  "MWD_COLORS_PKG" as

    function get_colors_query
		return varchar2;

end MWD_COLORS_PKG;
/
CREATE OR REPLACE PACKAGE BODY  "MWD_COLORS_PKG" as

    function get_colors_query
		return varchar2
    is
        v_query varchar2(5000);
    begin
			v_query := 'select                             nvl(
                            CASE WHEN (c.color_type IS NULL OR c.color_type = ''MATTE'') THEN '''' ELSE c.color_type || '' '' END ||                             CASE WHEN (c.tint IS NULL or c.tint = ''NORMAL'') THEN '''' ELSE c.tint || '' '' END ||                            CASE WHEN c.base_color IS NULL THEN '''' ELSE c.base_color || '' '' END ||                            CASE WHEN c.added_color IS NULL THEN '''' ELSE c.added_color || '' '' END,                            c.name) as display,            
                            c.name as return
                            from COLORS c
                            order by 1';            return v_query;
    end get_colors_query;

end MWD_COLORS_PKG;
/

CREATE OR REPLACE PACKAGE  "MWD_DOMAINS_PKG" as

    function get_domain_values_query(
        p_domain_name in varchar2 default null
    ) return varchar2;
    
    function get_boolean_labels_query
      return varchar2;
        
end MWD_DOMAINS_PKG;
/
CREATE OR REPLACE PACKAGE BODY  "MWD_DOMAINS_PKG" as

    function get_domain_values_query(
        p_domain_name in varchar2 default null
    ) return varchar2
    is
      v_domain_name varchar2(100);
            v_query varchar2(5000);
    begin
        if (p_domain_name is not null)
            then
                v_domain_name := p_domain_name;
                v_query := 'select 
                                d.domain_value as display,
                                d.domain_value as return
                                from domains d
                                where d.domain_name = '''|| UPPER(v_domain_name) ||'''
                                order by 1';
        else
                v_query := 'select 
                                d.domain_value as display,
                                d.domain_value as return
                                from domains d
                                order by 1';
        end if;
            return v_query;
    end get_domain_values_query;
    
    function get_boolean_labels_query
        return varchar2
    is
            v_query varchar2(5000);
    begin    
        v_query := 'select 
                        d.domain_value as display,
                        CASE 
                            WHEN d.domain_value = ''TRUE''
                                THEN ''Y''
                            WHEN d.domain_value = ''FALSE''
                                THEN ''N''
                        END as return
                        from domains d
                        where d.domain_name = ''BOOLEAN_LABEL''
                        order by 1';
        return v_query;
    end get_boolean_labels_query;

end MWD_DOMAINS_PKG;
/

CREATE OR REPLACE PACKAGE  "MWD_MATERIALS_PKG" as

    function get_materials_query
		return varchar2;

end MWD_MATERIALS_PKG;

/
CREATE OR REPLACE PACKAGE BODY  "MWD_MATERIALS_PKG" as

    function get_materials_query
		return varchar2
    is
		v_material_name varchar2(100);
        v_query varchar2(5000);
    begin
                        v_query := 'select                                        CASE WHEN m.processing_material IS NULL THEN '''' ELSE m.processing_material || '' '' END ||                                         CASE WHEN m.processing IS NULL THEN '''' ELSE m.processing || '' '' END ||                                         nvl(m.base_material,m.abbreviation) as display,
                                        m.abbreviation as return
                                        from MATERIALS m
                                        order by 1';            return v_query;
    end get_materials_query;

end MWD_MATERIALS_PKG;
/

 CREATE SEQUENCE   "DOMN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10000 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "ITEM_INGR_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "ITEM_ORDR_SRCE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "ITEM_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "ITEM_WEAV_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "KIT_ITEM_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "LOC_ADDR_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "LOC_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "ORDR_ITEM_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "ORDR_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "PERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "SET_ITEM_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "STOR_ITEM_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "STOR_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "WEAV_AR_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "WEAV_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE
/
CREATE OR REPLACE TRIGGER  "ACCESSORIES_BRIU" 
    BEFORE INSERT OR UPDATE ON ACCESSORIES 
    FOR EACH ROW 
DECLARE 
  value_in_list number;
BEGIN 
  	-- in lieu of check constraint.
	if :new.accessory_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'ACCESSORY_TYPE'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.accessory_type := null;
		end if;
	end if;

END; 


/
ALTER TRIGGER  "ACCESSORIES_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "ACCESSORIES_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON ACCESSORIES for each row 
 Declare 
  rec ACCESSORIES_JN%ROWTYPE; 
  blank ACCESSORIES_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.CREATED_ITEM_ID := :NEW.CREATED_ITEM_ID; 
      rec.ACCESSORY_TYPE := :NEW.ACCESSORY_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.CREATED_ITEM_ID := :OLD.CREATED_ITEM_ID; 
      rec.ACCESSORY_TYPE := :OLD.ACCESSORY_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into ACCESSORIES_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "ACCESSORIES_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "AMERICAN_WIRE_GAUGES_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON AMERICAN_WIRE_GAUGES for each row 
 Declare 
  rec AMERICAN_WIRE_GAUGES_JN%ROWTYPE; 
  blank AMERICAN_WIRE_GAUGES_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.AWG_ID := :NEW.AWG_ID; 
      rec.AWG := :NEW.AWG; 
      rec.INCH_DIAMETER := :NEW.INCH_DIAMETER; 
      rec.DIAMETER_MM := :NEW.DIAMETER_MM; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.AWG_ID := :OLD.AWG_ID; 
      rec.AWG := :OLD.AWG; 
      rec.INCH_DIAMETER := :OLD.INCH_DIAMETER; 
      rec.DIAMETER_MM := :OLD.DIAMETER_MM; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into AMERICAN_WIRE_GAUGES_JN VALUES rec; 
  END;
/
ALTER TRIGGER  "AMERICAN_WIRE_GAUGES_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "ATTACHMENTS_BRIU" 
    BEFORE INSERT OR UPDATE ON ATTACHMENTS 
    FOR EACH ROW 
DECLARE 
  value_in_list number;
BEGIN 
  	-- in lieu of check constraint.
	if :new.attachment_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'ATTACHMENT_TYPE'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.attachment_type := null;
		end if;
	end if;

END; 


/
ALTER TRIGGER  "ATTACHMENTS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "ATTACHMENTS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON ATTACHMENTS for each row 
 Declare 
  rec ATTACHMENTS_JN%ROWTYPE; 
  blank ATTACHMENTS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ATTACHMENT_ID := :NEW.ATTACHMENT_ID; 
      rec.ATTACHMENT_TYPE := :NEW.ATTACHMENT_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ATTACHMENT_ID := :OLD.ATTACHMENT_ID; 
      rec.ATTACHMENT_TYPE := :OLD.ATTACHMENT_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into ATTACHMENTS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "ATTACHMENTS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "BEADS_BRIU" 
    BEFORE INSERT OR UPDATE ON BEADS 
    FOR EACH ROW 
DECLARE 
  value_in_list number;
BEGIN 
  	-- in lieu of check constraint.
	if :new.bead_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'BEAD_TYPE'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.bead_type := null;
		end if;
	end if;

END; 


/
ALTER TRIGGER  "BEADS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "BEADS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON BEADS for each row 
 Declare 
  rec BEADS_JN%ROWTYPE; 
  blank BEADS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.BEAD_ID := :NEW.BEAD_ID; 
      rec.BEAD_TYPE := :NEW.BEAD_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.BEAD_ID := :OLD.BEAD_ID; 
      rec.BEAD_TYPE := :OLD.BEAD_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into BEADS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "BEADS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "CHAINS_BRIU" 
    BEFORE INSERT OR UPDATE ON CHAINS 
    FOR EACH ROW 
DECLARE 
  value_in_list number;
BEGIN 
  	-- in lieu of check constraint.
	if :new.chain_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'CHAIN_TYPE'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.chain_type := null;
		end if;
	end if;

END; 


/
ALTER TRIGGER  "CHAINS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "CHAINS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON CHAINS for each row 
 Declare 
  rec CHAINS_JN%ROWTYPE; 
  blank CHAINS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.CHAIN_ID := :NEW.CHAIN_ID; 
      rec.CHAIN_TYPE := :NEW.CHAIN_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.CHAIN_ID := :OLD.CHAIN_ID; 
      rec.CHAIN_TYPE := :OLD.CHAIN_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into CHAINS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "CHAINS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "CLASPS_BRIU" 
    BEFORE INSERT OR UPDATE ON CLASPS 
    FOR EACH ROW 
DECLARE 
  value_in_list number;
BEGIN 
  	-- in lieu of check constraint.
	if :new.clasp_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'CLASP_TYPE'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.clasp_type := null;
		end if;
	end if;

END; 


/
ALTER TRIGGER  "CLASPS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "CLASPS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON CLASPS for each row 
 Declare 
  rec CLASPS_JN%ROWTYPE; 
  blank CLASPS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.CLASP_ID := :NEW.CLASP_ID; 
      rec.CLASP_TYPE := :NEW.CLASP_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.CLASP_ID := :OLD.CLASP_ID; 
      rec.CLASP_TYPE := :OLD.CLASP_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into CLASPS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "CLASPS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "COLORS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON COLORS for each row 
 Declare 
  rec COLORS_JN%ROWTYPE; 
  blank COLORS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.NAME := :NEW.NAME; 
      rec.BASE_COLOR := :NEW.BASE_COLOR; 
      rec.TINT := :NEW.TINT; 
      rec.COLOR_TYPE := :NEW.COLOR_TYPE; 
      rec.ADDED_COLOR := :NEW.ADDED_COLOR; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.NAME := :OLD.NAME; 
      rec.BASE_COLOR := :OLD.BASE_COLOR; 
      rec.TINT := :OLD.TINT; 
      rec.COLOR_TYPE := :OLD.COLOR_TYPE; 
      rec.ADDED_COLOR := :OLD.ADDED_COLOR; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into COLORS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "COLORS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "CRAFTED_INGREDIENTS_BRIU" 
    BEFORE INSERT OR UPDATE ON CRAFTED_INGREDIENTS 
    FOR EACH ROW 
DECLARE 
  value_in_list number;
BEGIN 
  	-- in lieu of check constraint.
	if :new.crafted_ingredient_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'CRAFTED_INGREDIENT_TYPE'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.crafted_ingredient_type := null;
		end if;
	end if;

END; 


/
ALTER TRIGGER  "CRAFTED_INGREDIENTS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "CRAFTED_INGREDIENTS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON CRAFTED_INGREDIENTS for each row 
 Declare 
  rec CRAFTED_INGREDIENTS_JN%ROWTYPE; 
  blank CRAFTED_INGREDIENTS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.CRAFTED_INGREDIENT_ID := :NEW.CRAFTED_INGREDIENT_ID; 
      rec.CRAFTED_INGREDIENT_TYPE := :NEW.CRAFTED_INGREDIENT_TYPE; 
      rec.RAW_INGREDIENT_ID := :NEW.RAW_INGREDIENT_ID; 
      rec.RAW_INGREDIENT_WEIGHT_AMOUNT := :NEW.RAW_INGREDIENT_WEIGHT_AMOUNT; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.CRAFTED_INGREDIENT_ID := :OLD.CRAFTED_INGREDIENT_ID; 
      rec.CRAFTED_INGREDIENT_TYPE := :OLD.CRAFTED_INGREDIENT_TYPE; 
      rec.RAW_INGREDIENT_ID := :OLD.RAW_INGREDIENT_ID; 
      rec.RAW_INGREDIENT_WEIGHT_AMOUNT := :OLD.RAW_INGREDIENT_WEIGHT_AMOUNT; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into CRAFTED_INGREDIENTS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "CRAFTED_INGREDIENTS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "CREATED_ITEMS_BRIU" 
    BEFORE INSERT OR UPDATE ON CREATED_ITEMS 
    FOR EACH ROW 
DECLARE 
  value_in_list number;
BEGIN 
  	-- in lieu of check constraint.
	if :new.created_item_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'CREATED_ITEM_TYPE'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.created_item_type := null;
		end if;
	end if;

END; 


/
ALTER TRIGGER  "CREATED_ITEMS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "CREATED_ITEMS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON CREATED_ITEMS for each row 
 Declare 
  rec CREATED_ITEMS_JN%ROWTYPE; 
  blank CREATED_ITEMS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.CREATED_ITEM_ID := :NEW.CREATED_ITEM_ID; 
      rec.CREATED_ITEM_TYPE := :NEW.CREATED_ITEM_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.CREATED_ITEM_ID := :OLD.CREATED_ITEM_ID; 
      rec.CREATED_ITEM_TYPE := :OLD.CREATED_ITEM_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into CREATED_ITEMS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "CREATED_ITEMS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "DOMAINS_BRIU" 
    BEFORE INSERT OR UPDATE ON DOMAINS 
    FOR EACH ROW 
DECLARE 
  domn_value_id number; 
  name_count number;
  value_in_list number;
BEGIN 
  if inserting then   
    if :new.domain_value_id is null then 
      select domn_seq.nextval 
        into domn_value_id 
        from dual; 
      :new.domain_value_id := domn_value_id; 
    end if; 

	if :new.sort_order is null then
		select nvl(max(domain_value_id),0)
			into name_count
			from domains
			where domain_name = :new.domain_name;		
		:new.sort_order := name_count + 1;
	end if;

	-- in lieu of check constraint.
	if :new.domain_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'DOMAIN_TYPE'
			and domain_value = :new.domain_type;
		if (value_in_list = 0) then -- treat as if null to assign default.
			:new.domain_type := null;
		end if;
	end if;

	:new.user_created := user;
    :new.date_created := SYSDATE;
    :new.user_modified := user;
    :new.date_modified := SYSDATE;
  elsif updating THEN
    :new.user_modified := user;
    :new.date_modified := SYSDATE;
  end if;

END; 

/
ALTER TRIGGER  "DOMAINS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "DOMAINS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON DOMAINS for each row 
 Declare 
  rec DOMAINS_JN%ROWTYPE; 
  blank DOMAINS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.DOMAIN_VALUE_ID := :NEW.DOMAIN_VALUE_ID; 
      rec.DOMAIN_VALUE := :NEW.DOMAIN_VALUE; 
      rec.DOMAIN_NAME := :NEW.DOMAIN_NAME; 
      rec.DOMAIN_REFLOC := :NEW.DOMAIN_REFLOC; 
      rec.SORT_ORDER := :NEW.SORT_ORDER; 
      rec.PARENT_DOMAIN_VALUE_ID := :NEW.PARENT_DOMAIN_VALUE_ID; 
      rec.DESCRIPTION := :NEW.DESCRIPTION; 
      rec.DOMAIN_TYPE := :NEW.DOMAIN_TYPE; 
      rec.ACTIVE := :NEW.ACTIVE; 
      rec.USER_CREATED := :NEW.USER_CREATED; 
      rec.DATE_CREATED := :NEW.DATE_CREATED; 
      rec.USER_MODIFIED := :NEW.USER_MODIFIED; 
      rec.DATE_MODIFIED := :NEW.DATE_MODIFIED; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.DOMAIN_VALUE_ID := :OLD.DOMAIN_VALUE_ID; 
      rec.DOMAIN_VALUE := :OLD.DOMAIN_VALUE; 
      rec.DOMAIN_NAME := :OLD.DOMAIN_NAME; 
      rec.DOMAIN_REFLOC := :OLD.DOMAIN_REFLOC; 
      rec.SORT_ORDER := :OLD.SORT_ORDER; 
      rec.PARENT_DOMAIN_VALUE_ID := :OLD.PARENT_DOMAIN_VALUE_ID; 
      rec.DESCRIPTION := :OLD.DESCRIPTION; 
      rec.DOMAIN_TYPE := :OLD.DOMAIN_TYPE; 
      rec.ACTIVE := :OLD.ACTIVE; 
      rec.USER_CREATED := :OLD.USER_CREATED; 
      rec.DATE_CREATED := :OLD.DATE_CREATED; 
      rec.USER_MODIFIED := :OLD.USER_MODIFIED; 
      rec.DATE_MODIFIED := :OLD.DATE_MODIFIED; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into DOMAINS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "DOMAINS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "INGREDIENTS_BRIU" 
    BEFORE INSERT OR UPDATE ON INGREDIENTS 
    FOR EACH ROW 
DECLARE 
  ingr_id number;
  value_in_col_list number;
  value_in_mat_list number;
  value_in_cat_list number;
  value_in_ava_list number;
  value_in_sal_list number;
  cat_id number;
  is_active char(1);
  default_subcat varchar2(30) := 'OTHER';
BEGIN 

	-- IN LIEU OF CHECK CONSTRAINTS
	if :new.material is not null then
		select nvl(count(*),0)
			into value_in_mat_list
			from MATERIALS
			where ABBREVIATION = :new.material;

			if (value_in_mat_list = 0) then -- treat as if null to assign default.
				:new.material := null;
			end if;
	end if;

	if :new.color is not null then
		select nvl(count(*),0)
			into value_in_col_list
			from COLORS
			where NAME = :new.color;

			if (value_in_col_list = 0) then -- treat as if null to assign default.
				:new.color := null;
			end if;
	end if;

  	if :new.ingredient_type is not null then
        select nvl(count(*),0) 
        into value_in_cat_list
        from domains
    	where domain_name = 'INGREDIENT_TYPE'
		and domain_value = :new.ingredient_type;
        
        if (value_in_cat_list <> 0) then
    		select domain_value_id, active 
			into cat_id, is_active
			from domains 
			where domain_name = 'INGREDIENT_TYPE'
			and domain_value = :new.ingredient_type;

    		if (is_active <> 'Y') then
        		-- if category <> active, treat as null.
            	:new.ingredient_type := null;
            end if;
        end if;
	end if;

    IF :NEW.WIRE_DIAMETER_MM IS NOT NULL THEN
		SELECT MAX(A1.AWG)
		INTO :NEW.WIRE_DIAMETER_AWG
		FROM AMERICAN_WIRE_GAUGES A1
		, AMERICAN_WIRE_GAUGES A2
		WHERE :new.wire_diameter_mm 
			BETWEEN A1.DIAMETER_MM AND A2.DIAMETER_MM;

		SELECT MAX(S1.SWG)
		INTO :NEW.WIRE_DIAMETER_SWG
		FROM STANDARD_WIRE_GAUGES S1
		, STANDARD_WIRE_GAUGES S2
		WHERE :new.wire_diameter_mm 
			BETWEEN S1.DIAMETER_MM AND S2.DIAMETER_MM;

		IF :NEW.INNER_DIAMETER_MM IS NOT NULL THEN
			:NEW.ASPECT_RATIO := :new.inner_diameter_mm / :new.wire_diameter_mm;

			if :new.outer_diameter_mm is null then
				:NEW.OUTER_DIAMETER_MM := (:new.wire_diameter_mm * 2) + :new.inner_diameter_mm;
			end if;
		END IF;
	END IF;
END;
/
ALTER TRIGGER  "INGREDIENTS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "INGREDIENTS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON INGREDIENTS for each row 
       rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER');       rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE');       rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID');       IF INSERTING THEN         rec.JN_OPERATION := 'INS';       ELSIF UPDATING THEN         rec.JN_OPERATION := 'UPD';       END IF;     ELSIF DELETING THEN       rec.INGREDIENT_ID := :OLD.INGREDIENT_ID;       rec.MATERIAL := :OLD.MATERIAL;       rec.COLOR := :OLD.COLOR;       rec.WIRE_DIAMETER_MM := :OLD.WIRE_DIAMETER_MM;       rec.INNER_DIAMETER_MM := :OLD.INNER_DIAMETER_MM;       rec.OUTER_DIAMETER_MM := :OLD.OUTER_DIAMETER_MM;       rec.ASPECT_RATIO := :OLD.ASPECT_RATIO;       rec.OPENING_DIAMETER_MM := :OLD.OPENING_DIAMETER_MM;       rec.INGREDIENT_TYPE := :OLD.INGREDIENT_TYPE;       rec.WIRE_DIAMETER_SWG := :OLD.WIRE_DIAMETER_SWG;       rec.WIRE_DIAMETER_AWG := :OLD.WIRE_DIAMETER_AWG;       rec.JN_DATETIME := SYSDATE;       rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER');       rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE');       rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID');       rec.JN_OPERATION := 'DEL';     END IF;     INSERT into INGREDIENTS_JN VALUES rec;   END; 
/
ALTER TRIGGER  "INGREDIENTS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "ITEMS_BRIU" 
    BEFORE INSERT OR UPDATE ON ITEMS 
    FOR EACH ROW 
DECLARE 
  item_id number;
  is_active char(1);
  type_id number;
  value_in_type_list number;
  value_in_avai_list number;
  value_in_sale_list number;
BEGIN 
  if inserting then   
    if :new.item_id is null then 
      select item_seq.nextval 
        into item_id 
        from dual; 
      :new.item_id := item_id; 
    end if; 
  end if; 

  	-- in lieu of check constraint.
	if :new.availability is not null then
		select nvl(count(*),0)
			into value_in_avai_list
			from domains
			where domain_name = 'ITEM_AVAILABILITY'
			and active = 'Y'
			and domain_value = :new.availability;

		if (value_in_avai_list = 0) then -- treat as if null.
			:new.availability := null;
		end if;
	end if; 

	if :new.sale_status is not null then
		select nvl(count(*),0)
			into value_in_sale_list
			from domains
			where domain_name = 'ITEM_SALE_STATUS'
			and active = 'Y'
			and domain_value = :new.sale_status;

		if (value_in_sale_list = 0) then -- treat as if null.
			:new.sale_status := null;
		end if;
	end if;   

  if :new.item_type is not null then
		select domain_value_id, active 
			into type_id, is_active
			from domains 
			where domain_name = 'ITEM_TYPE' 
			and domain_value = :new.item_type;

		if (is_active <> 'Y') then
			-- if item type <> active, treat as null.
			:new.item_type := null;
		end if;
	end if;
END; 
/
ALTER TRIGGER  "ITEMS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "ITEMS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON ITEMS for each row 
 Declare 
  rec ITEMS_JN%ROWTYPE; 
  blank ITEMS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ITEM_ID := :NEW.ITEM_ID; 
      rec.NAME := :NEW.NAME; 
      rec.LIST_PRICE := :NEW.LIST_PRICE; 
      rec.AVAILABILITY := :NEW.AVAILABILITY; 
      rec.SALE_STATUS := :NEW.SALE_STATUS; 
      rec.ITEM_TYPE := :NEW.ITEM_TYPE; 
      rec.DESCRIPTION := :NEW.DESCRIPTION; 
      rec.COST_TOTAL := :NEW.COST_TOTAL; 
      rec.TIME_MIN := :NEW.TIME_MIN; 
      rec.LENGTH_MM := :NEW.LENGTH_MM; 
      rec.WIDTH_MM := :NEW.WIDTH_MM; 
      rec.THICKNESS_MM := :NEW.THICKNESS_MM; 
      rec.HEIGHT_MM := :NEW.HEIGHT_MM; 
      rec.WEIGHT_GR := :NEW.WEIGHT_GR; 
      rec.CURRENT_AMOUNT := :NEW.CURRENT_AMOUNT; 
      rec.PURCHASED_AMOUNT := :NEW.PURCHASED_AMOUNT; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ITEM_ID := :OLD.ITEM_ID; 
      rec.NAME := :OLD.NAME; 
      rec.LIST_PRICE := :OLD.LIST_PRICE; 
      rec.AVAILABILITY := :OLD.AVAILABILITY; 
      rec.SALE_STATUS := :OLD.SALE_STATUS; 
      rec.ITEM_TYPE := :OLD.ITEM_TYPE; 
      rec.DESCRIPTION := :OLD.DESCRIPTION; 
      rec.COST_TOTAL := :OLD.COST_TOTAL; 
      rec.TIME_MIN := :OLD.TIME_MIN; 
      rec.LENGTH_MM := :OLD.LENGTH_MM; 
      rec.WIDTH_MM := :OLD.WIDTH_MM; 
      rec.THICKNESS_MM := :OLD.THICKNESS_MM; 
      rec.HEIGHT_MM := :OLD.HEIGHT_MM; 
      rec.WEIGHT_GR := :OLD.WEIGHT_GR; 
      rec.CURRENT_AMOUNT := :OLD.CURRENT_AMOUNT; 
      rec.PURCHASED_AMOUNT := :OLD.PURCHASED_AMOUNT; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into ITEMS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "ITEMS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "ITEM_INGREDIENTS_AIUD" 
    AFTER INSERT OR UPDATE OR DELETE ON ITEM_INGREDIENTS 
begin 
  -- Update the Product Cost Total when any product ingredient is changed 
  update items set cost_total = 
  (select sum(unit_price*quantity) from item_ingredients 
    where item_ingredients.item_id = items.item_id); 
end; 

/
ALTER TRIGGER  "ITEM_INGREDIENTS_AIUD" ENABLE
/
CREATE OR REPLACE TRIGGER  "ITEM_INGREDIENTS_BRIU" 
    BEFORE INSERT OR UPDATE ON ITEM_INGREDIENTS 
    FOR EACH ROW 
declare 
  item_ingredient_id number; 
  l_list_price number; 
begin 
  if inserting then
    if :new.item_ingredient_id is null then 
		select item_ingr_seq.nextval  
			into item_ingredient_id  
			from dual; 
		:new.item_ingredient_id := item_ingredient_id; 
	end if; 
  end if;

  if (:new.unit_price is null OR :new.unit_price = 0) then 
    -- First, we need to get the current list price of the product ingredient 
    select nvl(list_price,0)
    into l_list_price 
    from items 
    where item_id = :new.ingredient_id; 
    -- Once we have the correct price, we will update the product ingredient with the correct price 
    :new.unit_price := l_list_price; 
  end if; 
end;
/
ALTER TRIGGER  "ITEM_INGREDIENTS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "ITEM_INGREDIENTS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON ITEM_INGREDIENTS for each row 
 Declare 
  rec ITEM_INGREDIENTS_JN%ROWTYPE; 
  blank ITEM_INGREDIENTS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ITEM_INGREDIENT_ID := :NEW.ITEM_INGREDIENT_ID; 
      rec.ITEM_ID := :NEW.ITEM_ID; 
      rec.INGREDIENT_ID := :NEW.INGREDIENT_ID; 
      rec.UNIT_PRICE := :NEW.UNIT_PRICE; 
      rec.QUANTITY := :NEW.QUANTITY; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ITEM_INGREDIENT_ID := :OLD.ITEM_INGREDIENT_ID; 
      rec.ITEM_ID := :OLD.ITEM_ID; 
      rec.INGREDIENT_ID := :OLD.INGREDIENT_ID; 
      rec.UNIT_PRICE := :OLD.UNIT_PRICE; 
      rec.QUANTITY := :OLD.QUANTITY; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into ITEM_INGREDIENTS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "ITEM_INGREDIENTS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "ITEM_ORDER_SOURCES_BRIU" 
    BEFORE INSERT OR UPDATE ON ITEM_ORDER_SOURCES 
    FOR EACH ROW 
DECLARE 
  item_order_source_id number; 
BEGIN 
  if inserting then   
    if :new.item_order_source_id is null then 
      select item_ordr_srce_seq.nextval 
        into item_order_source_id 
        from dual; 
      :new.item_order_source_id := item_order_source_id; 
    end if; 
  end if; 

END; 

/
ALTER TRIGGER  "ITEM_ORDER_SOURCES_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "ITEM_ORDER_SOURCES_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON ITEM_ORDER_SOURCES for each row 
 Declare 
  rec ITEM_ORDER_SOURCES_JN%ROWTYPE; 
  blank ITEM_ORDER_SOURCES_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ITEM_ORDER_SOURCE_ID := :NEW.ITEM_ORDER_SOURCE_ID; 
      rec.ITEM_ID := :NEW.ITEM_ID; 
      rec.SOURCE_PRODUCTCODE := :NEW.SOURCE_PRODUCTCODE; 
      rec.SOURCE_UNIT_PRICE := :NEW.SOURCE_UNIT_PRICE; 
      rec.SOURCE_AMOUNT := :NEW.SOURCE_AMOUNT; 
      rec.SOURCE_BRAND := :NEW.SOURCE_BRAND; 
      rec.SOURCE_ORDER_URL := :NEW.SOURCE_ORDER_URL; 
      rec.MODIFIED_DATE := :NEW.MODIFIED_DATE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ITEM_ORDER_SOURCE_ID := :OLD.ITEM_ORDER_SOURCE_ID; 
      rec.ITEM_ID := :OLD.ITEM_ID; 
      rec.SOURCE_PRODUCTCODE := :OLD.SOURCE_PRODUCTCODE; 
      rec.SOURCE_UNIT_PRICE := :OLD.SOURCE_UNIT_PRICE; 
      rec.SOURCE_AMOUNT := :OLD.SOURCE_AMOUNT; 
      rec.SOURCE_BRAND := :OLD.SOURCE_BRAND; 
      rec.SOURCE_ORDER_URL := :OLD.SOURCE_ORDER_URL; 
      rec.MODIFIED_DATE := :OLD.MODIFIED_DATE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into ITEM_ORDER_SOURCES_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "ITEM_ORDER_SOURCES_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "ITEM_WEAVES_BRIU" 
    BEFORE INSERT OR UPDATE ON ITEM_WEAVES 
    FOR EACH ROW 
declare 
  item_weave_id number; 
begin 
  if inserting then
    if :new.item_weave_id is null then 
		select item_weav_seq.nextval  
			into item_weave_id  
			from dual; 
		:new.item_weave_id := item_weave_id; 
	end if; 
  end if;
end; 

/
ALTER TRIGGER  "ITEM_WEAVES_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "ITEM_WEAVES_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON ITEM_WEAVES for each row 
 Declare 
  rec ITEM_WEAVES_JN%ROWTYPE; 
  blank ITEM_WEAVES_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ITEM_WEAVE_ID := :NEW.ITEM_WEAVE_ID; 
      rec.ITEM_ID := :NEW.ITEM_ID; 
      rec.WEAVE_ID := :NEW.WEAVE_ID; 
      rec.INGREDIENT_ID := :NEW.INGREDIENT_ID; 
      rec.RING_QUANTITY := :NEW.RING_QUANTITY; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ITEM_WEAVE_ID := :OLD.ITEM_WEAVE_ID; 
      rec.ITEM_ID := :OLD.ITEM_ID; 
      rec.WEAVE_ID := :OLD.WEAVE_ID; 
      rec.INGREDIENT_ID := :OLD.INGREDIENT_ID; 
      rec.RING_QUANTITY := :OLD.RING_QUANTITY; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into ITEM_WEAVES_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "ITEM_WEAVES_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "JEWELRY_BRIU" 
    BEFORE INSERT OR UPDATE ON JEWELRY 
    FOR EACH ROW 
DECLARE 
  value_in_list number;
BEGIN 
  	-- in lieu of check constraint.
	if :new.jewelry_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'JEWELRY_TYPE'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.jewelry_type := null;
		end if;
	end if;

END; 


/
ALTER TRIGGER  "JEWELRY_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "JEWELRY_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON JEWELRY for each row 
 Declare 
  rec JEWELRY_JN%ROWTYPE; 
  blank JEWELRY_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.CREATED_ITEM_ID := :NEW.CREATED_ITEM_ID; 
      rec.JEWELRY_TYPE := :NEW.JEWELRY_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.CREATED_ITEM_ID := :OLD.CREATED_ITEM_ID; 
      rec.JEWELRY_TYPE := :OLD.JEWELRY_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into JEWELRY_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "JEWELRY_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "KITS_BRIU" 
    BEFORE INSERT OR UPDATE ON KITS 
    FOR EACH ROW 
DECLARE 
  kit_id number;
  value_in_ava_list number;
  value_in_sal_list number;
BEGIN 

    	-- in lieu of check constraint.
	if :new.availability is not null then
		select nvl(count(*),0)
			into value_in_ava_list
			from domains
			where domain_name = 'ITEM_AVAILABILITY'
			and active = 'Y'
			and domain_value = :new.availability;

		if (value_in_ava_list = 0) then -- treat as if null.
			:new.availability := null;
		end if;
	end if; 

	if :new.sale_status is not null then
		select nvl(count(*),0)
			into value_in_sal_list
			from domains
			where domain_name = 'ITEM_SALE_STATUS'
			and active = 'Y'
			and domain_value = :new.sale_status;

		if (value_in_sal_list = 0) then -- treat as if null.
			:new.sale_status := null;
		end if;
	end if;   
END; 

/
ALTER TRIGGER  "KITS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "KITS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON KITS for each row 
 Declare 
  rec KITS_JN%ROWTYPE; 
  blank KITS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.KIT_ID := :NEW.KIT_ID; 
      rec.NAME := :NEW.NAME; 
      rec.LIST_PRICE := :NEW.LIST_PRICE; 
      rec.AVAILABILITY := :NEW.AVAILABILITY; 
      rec.SALE_STATUS := :NEW.SALE_STATUS; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.KIT_ID := :OLD.KIT_ID; 
      rec.NAME := :OLD.NAME; 
      rec.LIST_PRICE := :OLD.LIST_PRICE; 
      rec.AVAILABILITY := :OLD.AVAILABILITY; 
      rec.SALE_STATUS := :OLD.SALE_STATUS; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into KITS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "KITS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "KIT_ITEMS_BRIU" 
    BEFORE INSERT OR UPDATE ON KIT_ITEMS 
    FOR EACH ROW 
declare
  kit_item_id number;  
  l_list_price number; 
begin 
  if inserting then
	  if :new.kit_item_id is null then 
		select kit_item_seq.nextval  
		  into kit_item_id  
		  from dual; 
		:new.kit_item_id := kit_item_id; 
	  end if;
  end if; 

  if :new.unit_price is null then 
	if :new.item_id is not null 
			then
		select list_price 
		into l_list_price 
		from items 
		where item_id = :new.item_id; 	
	else
		l_list_price := 0; -- ELSE CLAUSE TO CATCH EMPTY INSERTS.
	end if;

	:new.unit_price := l_list_price;
  end if; 
end;
/
ALTER TRIGGER  "KIT_ITEMS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "KIT_ITEMS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON KIT_ITEMS for each row 
 Declare 
  rec KIT_ITEMS_JN%ROWTYPE; 
  blank KIT_ITEMS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.KIT_ITEM_ID := :NEW.KIT_ITEM_ID; 
      rec.KIT_ID := :NEW.KIT_ID; 
      rec.ITEM_ID := :NEW.ITEM_ID; 
      rec.UNIT_PRICE := :NEW.UNIT_PRICE; 
      rec.QUANTITY := :NEW.QUANTITY; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.KIT_ITEM_ID := :OLD.KIT_ITEM_ID; 
      rec.KIT_ID := :OLD.KIT_ID; 
      rec.ITEM_ID := :OLD.ITEM_ID; 
      rec.UNIT_PRICE := :OLD.UNIT_PRICE; 
      rec.QUANTITY := :OLD.QUANTITY; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into KIT_ITEMS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "KIT_ITEMS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "LACE_BRIU" 
    BEFORE INSERT OR UPDATE ON LACE 
    FOR EACH ROW 
DECLARE 
  value_in_list number;
BEGIN 
  	-- in lieu of check constraint.
	if :new.lace_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'LACE_TYPE'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.lace_type := null;
		end if;
	end if;

END; 


/
ALTER TRIGGER  "LACE_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "LACE_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON LACE for each row 
 Declare 
  rec LACE_JN%ROWTYPE; 
  blank LACE_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.LACE_ID := :NEW.LACE_ID; 
      rec.LACE_TYPE := :NEW.LACE_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.LACE_ID := :OLD.LACE_ID; 
      rec.LACE_TYPE := :OLD.LACE_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into LACE_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "LACE_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "LEGAL_PERSONS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON LEGAL_PERSONS for each row 
 Declare 
  rec LEGAL_PERSONS_JN%ROWTYPE; 
  blank LEGAL_PERSONS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.PERSON_ID := :NEW.PERSON_ID; 
      rec.LEGAL_NAME := :NEW.LEGAL_NAME; 
      rec.WEBSITE := :NEW.WEBSITE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.PERSON_ID := :OLD.PERSON_ID; 
      rec.LEGAL_NAME := :OLD.LEGAL_NAME; 
      rec.WEBSITE := :OLD.WEBSITE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into LEGAL_PERSONS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "LEGAL_PERSONS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "LOCATIONS_BRIU" 
    BEFORE INSERT OR UPDATE ON LOCATIONS 
    FOR EACH ROW 
DECLARE
	location_id number;
BEGIN 
   if inserting then 
	if :new.location_id is null then 
      select loc_seq.nextval 
        INTO location_id
        FROM dual; 
      :new.location_id := location_id;   
	end if;
   end if; 
END; 
/
ALTER TRIGGER  "LOCATIONS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "LOCATIONS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON LOCATIONS for each row 
 Declare 
  rec LOCATIONS_JN%ROWTYPE; 
  blank LOCATIONS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.LOCATION_ID := :NEW.LOCATION_ID; 
	  rec.PERSON_ID := :NEW.PERSON_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.LOCATION_ID := :OLD.LOCATION_ID; 
	  rec.PERSON_ID := :OLD.PERSON_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into LOCATIONS_JN VALUES rec; 
  END; 
/
ALTER TRIGGER  "LOCATIONS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "LOCATION_ADDRESSES_BRIU" 
    BEFORE INSERT OR UPDATE ON LOCATION_ADDRESSES 
    FOR EACH ROW 
DECLARE 
  location_address_id number; 
BEGIN 
  if inserting then   
    if :new.location_address_id is null then 
      select loc_addr_seq.nextval 
        into location_address_id 
        from dual; 
      :new.location_address_id := location_address_id; 
    end if; 
  end if; 

END; 

/
ALTER TRIGGER  "LOCATION_ADDRESSES_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "LOCATION_ADDRESSES_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON LOCATION_ADDRESSES for each row 
 Declare 
  rec LOCATION_ADDRESSES_JN%ROWTYPE; 
  blank LOCATION_ADDRESSES_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.LOCATION_ADDRESS_ID := :NEW.LOCATION_ADDRESS_ID; 
      rec.LOCATION_ID := :NEW.LOCATION_ID; 
      rec.STREET := :NEW.STREET; 
      rec.NR := :NEW.NR; 
      rec.NR_ADDITION := :NEW.NR_ADDITION; 
      rec.CITY := :NEW.CITY; 
      rec.COUNTRY := :NEW.COUNTRY; 
      rec.POSTAL_CODE := :NEW.POSTAL_CODE; 
      rec.LATITUDE := :NEW.LATITUDE; 
      rec.LONGITUDE := :NEW.LONGITUDE; 
      rec.IS_MAIN := :NEW.IS_MAIN; 
      rec.IS_ACTIVE := :NEW.IS_ACTIVE; 
      rec.ADDRESS_TYPE := :NEW.ADDRESS_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.LOCATION_ADDRESS_ID := :OLD.LOCATION_ADDRESS_ID; 
      rec.LOCATION_ID := :OLD.LOCATION_ID; 
      rec.STREET := :OLD.STREET; 
      rec.NR := :OLD.NR; 
      rec.NR_ADDITION := :OLD.NR_ADDITION; 
      rec.CITY := :OLD.CITY; 
      rec.COUNTRY := :OLD.COUNTRY; 
      rec.POSTAL_CODE := :OLD.POSTAL_CODE; 
      rec.LATITUDE := :OLD.LATITUDE; 
      rec.LONGITUDE := :OLD.LONGITUDE; 
      rec.IS_MAIN := :OLD.IS_MAIN; 
      rec.IS_ACTIVE := :OLD.IS_ACTIVE; 
      rec.ADDRESS_TYPE := :OLD.ADDRESS_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into LOCATION_ADDRESSES_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "LOCATION_ADDRESSES_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "MATERIALS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON MATERIALS for each row 
 Declare 
  rec MATERIALS_JN%ROWTYPE; 
  blank MATERIALS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ABBREVIATION := :NEW.ABBREVIATION; 
      rec.BASE_MATERIAL := :NEW.BASE_MATERIAL; 
      rec.PROCESSING := :NEW.PROCESSING; 
      rec.PROCESSING_MATERIAL := :NEW.PROCESSING_MATERIAL; 
      rec.ALLERGENS_EXCLUDED := :NEW.ALLERGENS_EXCLUDED; 
      rec.BASE_MATERIALS_INCLUDED := :NEW.BASE_MATERIALS_INCLUDED; 
      rec.PARENT_MATERIAL := :NEW.PARENT_MATERIAL; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ABBREVIATION := :OLD.ABBREVIATION; 
      rec.BASE_MATERIAL := :OLD.BASE_MATERIAL; 
      rec.PROCESSING := :OLD.PROCESSING; 
      rec.PROCESSING_MATERIAL := :OLD.PROCESSING_MATERIAL; 
      rec.ALLERGENS_EXCLUDED := :OLD.ALLERGENS_EXCLUDED; 
      rec.BASE_MATERIALS_INCLUDED := :OLD.BASE_MATERIALS_INCLUDED; 
      rec.PARENT_MATERIAL := :OLD.PARENT_MATERIAL; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into MATERIALS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "MATERIALS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "NATURAL_PERSONS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON NATURAL_PERSONS for each row 
 Declare 
  rec NATURAL_PERSONS_JN%ROWTYPE; 
  blank NATURAL_PERSONS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.PERSON_ID := :NEW.PERSON_ID; 
      rec.FIRST_NAME := :NEW.FIRST_NAME; 
      rec.LAST_NAME := :NEW.LAST_NAME; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.PERSON_ID := :OLD.PERSON_ID; 
      rec.FIRST_NAME := :OLD.FIRST_NAME; 
      rec.LAST_NAME := :OLD.LAST_NAME; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into NATURAL_PERSONS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "NATURAL_PERSONS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "ORDERS_BRIU" 
    BEFORE INSERT OR UPDATE ON ORDERS 
    FOR EACH ROW 
DECLARE 
  order_id number; 
  value_in_list number;
BEGIN 
  if inserting then   
    if :new.order_id is null then 
      select ordr_seq.nextval 
        INTO order_id 
        FROM dual; 
      :new.order_id := order_id; 
    end if;
  end if; 

 	-- in lieu of check constraint.
	if :new.order_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'ORDER_TYPE'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.order_type := null;
		end if;
	end if;

END; 

/
ALTER TRIGGER  "ORDERS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "ORDERS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON ORDERS for each row 
 Declare 
  rec ORDERS_JN%ROWTYPE; 
  blank ORDERS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ORDER_ID := :NEW.ORDER_ID; 
      rec.LOCATION_ADDRESS_ID := :NEW.LOCATION_ADDRESS_ID; 
      rec.PERSON_ID := :NEW.PERSON_ID; 
      rec.ORDER_TYPE := :NEW.ORDER_TYPE; 
      rec.ORDER_DATE := :NEW.ORDER_DATE; 
      rec.SHIPPING := :NEW.SHIPPING; 
      rec.IS_ONLINE := :NEW.IS_ONLINE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ORDER_ID := :OLD.ORDER_ID; 
      rec.LOCATION_ADDRESS_ID := :OLD.LOCATION_ADDRESS_ID; 
      rec.PERSON_ID := :OLD.PERSON_ID; 
      rec.ORDER_TYPE := :OLD.ORDER_TYPE; 
      rec.ORDER_DATE := :OLD.ORDER_DATE; 
      rec.SHIPPING := :OLD.SHIPPING; 
      rec.IS_ONLINE := :OLD.IS_ONLINE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into ORDERS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "ORDERS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "ORDER_ITEMS_BRIU" 
    BEFORE INSERT OR UPDATE ON ORDER_ITEMS 
    FOR EACH ROW 
declare
  order_item_id number;  
  l_list_price number; 
begin 
  if inserting then
	  if :new.order_item_id is null then 
		select ordr_item_seq.nextval  
		  into order_item_id  
		  from dual; 
		:new.order_item_id := order_item_id; 
	  end if;
  end if; 

  if :new.unit_price is null then 
	if :new.item_id is not null 
			then
		select list_price 
		into l_list_price 
		from items 
		where item_id = :new.item_id; 
	else
		l_list_price := 0; -- ELSE CLAUSE TO LEAVE SPACE FOR NEW ORDER_ITEMS LIKE KITS/SETS.
	end if;
  end if; 
end; 

/
ALTER TRIGGER  "ORDER_ITEMS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "ORDER_ITEMS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON ORDER_ITEMS for each row 
 Declare 
  rec ORDER_ITEMS_JN%ROWTYPE; 
  blank ORDER_ITEMS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ORDER_ITEM_ID := :NEW.ORDER_ITEM_ID; 
      rec.ORDER_ID := :NEW.ORDER_ID; 
      rec.ITEM_ID := :NEW.ITEM_ID; 
      rec.UNIT_PRICE := :NEW.UNIT_PRICE; 
      rec.QUANTITY := :NEW.QUANTITY; 
      rec.ITEM_STATUS := :NEW.ITEM_STATUS; 
      rec.ORDER_ITEM_URL := :NEW.ORDER_ITEM_URL; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ORDER_ITEM_ID := :OLD.ORDER_ITEM_ID; 
      rec.ORDER_ID := :OLD.ORDER_ID; 
      rec.ITEM_ID := :OLD.ITEM_ID; 
      rec.UNIT_PRICE := :OLD.UNIT_PRICE; 
      rec.QUANTITY := :OLD.QUANTITY; 
      rec.ITEM_STATUS := :OLD.ITEM_STATUS; 
      rec.ORDER_ITEM_URL := :OLD.ORDER_ITEM_URL; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into ORDER_ITEMS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "ORDER_ITEMS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "ORNAMENTS_BRIU" 
    BEFORE INSERT OR UPDATE ON ORNAMENTS 
    FOR EACH ROW 
DECLARE 
  value_in_list number;
BEGIN 
  	-- in lieu of check constraint.
	if :new.ornament_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'ORNAMENT_TYPE'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.ornament_type := null;
		end if;
	end if;

END; 


/
ALTER TRIGGER  "ORNAMENTS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "ORNAMENTS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON ORNAMENTS for each row 
 Declare 
  rec ORNAMENTS_JN%ROWTYPE; 
  blank ORNAMENTS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.CREATED_ITEM_ID := :NEW.CREATED_ITEM_ID; 
      rec.ORNAMENT_TYPE := :NEW.ORNAMENT_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.CREATED_ITEM_ID := :OLD.CREATED_ITEM_ID; 
      rec.ORNAMENT_TYPE := :OLD.ORNAMENT_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into ORNAMENTS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "ORNAMENTS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "OTHER_INGREDIENTS_BRIU" 
    BEFORE INSERT OR UPDATE ON OTHER_INGREDIENTS 
    FOR EACH ROW 
DECLARE 
  value_in_list number;
BEGIN 
  	-- in lieu of check constraint.
	if :new.other_ingredient_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'OTHER_INGREDIENT_TYPE'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.other_ingredient_type := null;
		end if;
	end if;

END; 


/
ALTER TRIGGER  "OTHER_INGREDIENTS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "OTHER_INGREDIENTS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON OTHER_INGREDIENTS for each row 
 Declare 
  rec OTHER_INGREDIENTS_JN%ROWTYPE; 
  blank OTHER_INGREDIENTS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.OTHER_INGREDIENT_ID := :NEW.OTHER_INGREDIENT_ID; 
      rec.OTHER_INGREDIENT_TYPE := :NEW.OTHER_INGREDIENT_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.OTHER_INGREDIENT_ID := :OLD.OTHER_INGREDIENT_ID; 
      rec.OTHER_INGREDIENT_TYPE := :OLD.OTHER_INGREDIENT_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into OTHER_INGREDIENTS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "OTHER_INGREDIENTS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "OTHER_ITEMS_BRIU" 
    BEFORE INSERT OR UPDATE ON OTHER_ITEMS 
    FOR EACH ROW 
DECLARE 
  value_in_list number;
BEGIN 
  	-- in lieu of check constraint.
	if :new.other_item_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'OTHER_ITEM_TYPE'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.other_item_type := null;
		end if;
	end if;

END; 


/
ALTER TRIGGER  "OTHER_ITEMS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "OTHER_ITEMS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON OTHER_ITEMS for each row 
 Declare 
  rec OTHER_ITEMS_JN%ROWTYPE; 
  blank OTHER_ITEMS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.OTHER_ITEM_ID := :NEW.OTHER_ITEM_ID; 
      rec.OTHER_ITEM_TYPE := :NEW.OTHER_ITEM_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.OTHER_ITEM_ID := :OLD.OTHER_ITEM_ID; 
      rec.OTHER_ITEM_TYPE := :OLD.OTHER_ITEM_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into OTHER_ITEMS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "OTHER_ITEMS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "PERSONS_BRIU" 
    BEFORE INSERT OR UPDATE ON PERSONS 
    FOR EACH ROW 
DECLARE 
	pers_id 	number; 
BEGIN 
  if inserting then   
    if :new.person_id is null then 
      select pers_seq.nextval 
        into pers_id 
        from dual; 
      :new.person_id := pers_id; 
    end if; 
  end if; 
END; 

/
ALTER TRIGGER  "PERSONS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "PERSONS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON PERSONS for each row 
 Declare 
  rec PERSONS_JN%ROWTYPE; 
  blank PERSONS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.PERSON_ID := :NEW.PERSON_ID; 
      rec.EMAIL := :NEW.EMAIL; 
      rec.PHONE_FIXED := :NEW.PHONE_FIXED; 
      rec.IS_COMPETITOR := :NEW.IS_COMPETITOR; 
      rec.PERSON_TYPE := :NEW.PERSON_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.PERSON_ID := :OLD.PERSON_ID; 
      rec.EMAIL := :OLD.EMAIL; 
      rec.PHONE_FIXED := :OLD.PHONE_FIXED; 
      rec.IS_COMPETITOR := :OLD.IS_COMPETITOR; 
      rec.PERSON_TYPE := :OLD.PERSON_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into PERSONS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "PERSONS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "PURCHASES_BRIU" 
    BEFORE INSERT OR UPDATE ON PURCHASES 
    FOR EACH ROW 
DECLARE
    value_in_list number;
BEGIN
	if :new.order_status is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'PURCHASE_STATUS'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.order_status := null;
		end if;
	end if;
END; 

/
ALTER TRIGGER  "PURCHASES_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "PURCHASES_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON PURCHASES for each row 
 Declare 
  rec PURCHASES_JN%ROWTYPE; 
  blank PURCHASES_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ORDER_ID := :NEW.ORDER_ID; 
      rec.ORDER_STATUS := :NEW.ORDER_STATUS; 
      rec.TAX_RETURNED := :NEW.TAX_RETURNED; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ORDER_ID := :OLD.ORDER_ID; 
      rec.ORDER_STATUS := :OLD.ORDER_STATUS; 
      rec.TAX_RETURNED := :OLD.TAX_RETURNED; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into PURCHASES_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "PURCHASES_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "RAW_INGREDIENTS_BRIU" 
    BEFORE INSERT OR UPDATE ON RAW_INGREDIENTS 
    FOR EACH ROW 
DECLARE 
  value_in_list number;
BEGIN 
  	-- in lieu of check constraint.
	if :new.raw_ingredient_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'RAW_INGREDIENT_TYPE'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.raw_ingredient_type := null;
		end if;
	end if;

END; 


/
ALTER TRIGGER  "RAW_INGREDIENTS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "RAW_INGREDIENTS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON RAW_INGREDIENTS for each row 
 Declare 
  rec RAW_INGREDIENTS_JN%ROWTYPE; 
  blank RAW_INGREDIENTS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.RAW_INGREDIENT_ID := :NEW.RAW_INGREDIENT_ID; 
      rec.RAW_INGREDIENT_TYPE := :NEW.RAW_INGREDIENT_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.RAW_INGREDIENT_ID := :OLD.RAW_INGREDIENT_ID; 
      rec.RAW_INGREDIENT_TYPE := :OLD.RAW_INGREDIENT_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into RAW_INGREDIENTS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "RAW_INGREDIENTS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "RINGS_BRIU" 
    BEFORE INSERT OR UPDATE ON RINGS 
    FOR EACH ROW 
DECLARE 
  value_in_list number;
BEGIN 
  	-- in lieu of check constraint.
	if :new.ring_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'RING_TYPE'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.ring_type := null;
		end if;
	end if;

END; 


/
ALTER TRIGGER  "RINGS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "RINGS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON RINGS for each row 
 Declare 
  rec RINGS_JN%ROWTYPE; 
  blank RINGS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.RING_ID := :NEW.RING_ID; 
      rec.RING_TYPE := :NEW.RING_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.RING_ID := :OLD.RING_ID; 
      rec.RING_TYPE := :OLD.RING_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into RINGS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "RINGS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "SALES_BRIU" 
    BEFORE INSERT OR UPDATE ON SALES 
    FOR EACH ROW 
DECLARE
    value_in_list number;
BEGIN
	if :new.order_status is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'SALE_STATUS'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.order_status := null;
		end if;
	end if;
END; 

/
ALTER TRIGGER  "SALES_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "SALES_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON SALES for each row 
 Declare 
  rec SALES_JN%ROWTYPE; 
  blank SALES_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ORDER_ID := :NEW.ORDER_ID; 
      rec.INVOICE_YEAR := :NEW.INVOICE_YEAR; 
      rec.INVOICE_QUARTER := :NEW.INVOICE_QUARTER; 
      rec.INVOICE_NUMBER := :NEW.INVOICE_NUMBER; 
      rec.ORDER_STATUS := :NEW.ORDER_STATUS; 
      rec.COMPLETE_DATE := :NEW.COMPLETE_DATE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ORDER_ID := :OLD.ORDER_ID; 
      rec.INVOICE_YEAR := :OLD.INVOICE_YEAR; 
      rec.INVOICE_QUARTER := :OLD.INVOICE_QUARTER; 
      rec.INVOICE_NUMBER := :OLD.INVOICE_NUMBER; 
      rec.ORDER_STATUS := :OLD.ORDER_STATUS; 
      rec.COMPLETE_DATE := :OLD.COMPLETE_DATE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into SALES_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "SALES_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "SCALES_BRIU" 
    BEFORE INSERT OR UPDATE ON SCALES 
    FOR EACH ROW 
DECLARE 
  value_in_list number;
BEGIN 
  	-- in lieu of check constraint.
	if :new.scale_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'SCALE_TYPE'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.scale_type := null;
		end if;
	end if;

END; 


/
ALTER TRIGGER  "SCALES_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "SCALES_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON SCALES for each row 
 Declare 
  rec SCALES_JN%ROWTYPE; 
  blank SCALES_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.SCALE_ID := :NEW.SCALE_ID; 
      rec.SCALE_TYPE := :NEW.SCALE_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.SCALE_ID := :OLD.SCALE_ID; 
      rec.SCALE_TYPE := :OLD.SCALE_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into SCALES_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "SCALES_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "SETS_BRIU" 
    BEFORE INSERT OR UPDATE ON SETS 
    FOR EACH ROW 
DECLARE 
  set_id number;
  value_in_ava_list number;
  value_in_sal_list number;
BEGIN 

      	-- in lieu of check constraint.
	if :new.availability is not null then
		select nvl(count(*),0)
			into value_in_ava_list
			from domains
			where domain_name = 'ITEM_AVAILABILITY'
			and active = 'Y'
			and domain_value = :new.availability;

		if (value_in_ava_list = 0) then -- treat as if null.
			:new.availability := null;
		end if;
	end if; 

	if :new.sale_status is not null then
		select nvl(count(*),0)
			into value_in_sal_list
			from domains
			where domain_name = 'ITEM_SALE_STATUS'
			and active = 'Y'
			and domain_value = :new.sale_status;

		if (value_in_sal_list = 0) then -- treat as if null.
			:new.sale_status := null;
		end if;
	end if;   
END; 

/
ALTER TRIGGER  "SETS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "SETS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON SETS for each row 
 Declare 
  rec SETS_JN%ROWTYPE; 
  blank SETS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.SET_ID := :NEW.SET_ID; 
      rec.NAME := :NEW.NAME; 
      rec.LIST_PRICE := :NEW.LIST_PRICE; 
      rec.AVAILABILITY := :NEW.AVAILABILITY; 
      rec.SALE_STATUS := :NEW.SALE_STATUS; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.SET_ID := :OLD.SET_ID; 
      rec.NAME := :OLD.NAME; 
      rec.LIST_PRICE := :OLD.LIST_PRICE; 
      rec.AVAILABILITY := :OLD.AVAILABILITY; 
      rec.SALE_STATUS := :OLD.SALE_STATUS; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into SETS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "SETS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "SET_ITEMS_BRIU" 
    BEFORE INSERT OR UPDATE ON SET_ITEMS 
    FOR EACH ROW 
declare
  set_item_id number;  
  l_list_price number; 
begin 
  if inserting then
	  if :new.set_item_id is null then 
		select set_item_seq.nextval  
		  into set_item_id  
		  from dual; 
		:new.set_item_id := set_item_id; 
	  end if;
  end if; 

  if :new.unit_price is null then 
	if :new.created_item_id is not null
			then
		select list_price 
		into l_list_price 
		from items 
		where item_id = :new.created_item_id;
	else
		l_list_price := 0; -- ELSE CLAUSE TO CATCH EMPTY INSERTS.
	end if;

	:new.unit_price := l_list_price;
  end if; 
end; 

/
ALTER TRIGGER  "SET_ITEMS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "SET_ITEMS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON SET_ITEMS for each row 
 Declare 
  rec SET_ITEMS_JN%ROWTYPE; 
  blank SET_ITEMS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.SET_ITEM_ID := :NEW.SET_ITEM_ID; 
      rec.SET_ID := :NEW.SET_ID; 
      rec.CREATED_ITEM_ID := :NEW.CREATED_ITEM_ID; 
      rec.UNIT_PRICE := :NEW.UNIT_PRICE; 
      rec.QUANTITY := :NEW.QUANTITY; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.SET_ITEM_ID := :OLD.SET_ITEM_ID; 
      rec.SET_ID := :OLD.SET_ID; 
      rec.CREATED_ITEM_ID := :OLD.CREATED_ITEM_ID; 
      rec.UNIT_PRICE := :OLD.UNIT_PRICE; 
      rec.QUANTITY := :OLD.QUANTITY; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into SET_ITEMS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "SET_ITEMS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "STANDARD_WIRE_GAUGES_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON STANDARD_WIRE_GAUGES for each row 
 Declare 
  rec STANDARD_WIRE_GAUGES_JN%ROWTYPE; 
  blank STANDARD_WIRE_GAUGES_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.SWG_ID := :NEW.SWG_ID; 
      rec.SWG := :NEW.SWG; 
      rec.INCH_DIAMETER := :NEW.INCH_DIAMETER; 
      rec.DIAMETER_MM := :NEW.DIAMETER_MM; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.SWG_ID := :OLD.SWG_ID; 
      rec.SWG := :OLD.SWG; 
      rec.INCH_DIAMETER := :OLD.INCH_DIAMETER; 
      rec.DIAMETER_MM := :OLD.DIAMETER_MM; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into STANDARD_WIRE_GAUGES_JN VALUES rec; 
  END;
/
ALTER TRIGGER  "STANDARD_WIRE_GAUGES_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "STORES_BRIU" 
    BEFORE INSERT OR UPDATE ON STORES 
    FOR EACH ROW 
DECLARE
	value_in_list number;
	store_id number;
BEGIN 
   if inserting then 
	if :new.store_id is null then 
      select stor_seq.nextval 
        INTO store_id 
        FROM dual; 
      :new.store_id := store_id;   
	end if;
   end if; 

 	-- in lieu of check constraint.
	if :new.store_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'STORE_TYPE'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.store_type := null;
		end if;
	end if;   
END; 

/
ALTER TRIGGER  "STORES_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "STORES_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON STORES for each row 
 Declare 
  rec STORES_JN%ROWTYPE; 
  blank STORES_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.STORE_ID := :NEW.STORE_ID; 
      rec.NAME := :NEW.NAME; 
      rec.WEBSITE := :NEW.WEBSITE; 
      rec.OPEN_DATE := :NEW.OPEN_DATE; 
      rec.STORE_TYPE := :NEW.STORE_TYPE; 
      rec.LOCATION_ADDRESS_ID := :NEW.LOCATION_ADDRESS_ID; 
      rec.LEGAL_PERSON_ID := :NEW.LEGAL_PERSON_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.STORE_ID := :OLD.STORE_ID; 
      rec.NAME := :OLD.NAME; 
      rec.WEBSITE := :OLD.WEBSITE; 
      rec.OPEN_DATE := :OLD.OPEN_DATE; 
      rec.STORE_TYPE := :OLD.STORE_TYPE; 
      rec.LOCATION_ADDRESS_ID := :OLD.LOCATION_ADDRESS_ID; 
      rec.LEGAL_PERSON_ID := :OLD.LEGAL_PERSON_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into STORES_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "STORES_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "STORE_ITEMS_BRIU" 
    BEFORE INSERT OR UPDATE ON STORE_ITEMS 
    FOR EACH ROW 
DECLARE
	store_item_id	number;
	l_list_price		number;
BEGIN 
   if inserting then 
   	  if :new.store_item_id is null then 
		select stor_item_seq.nextval  
		  into store_item_id  
		  from dual; 
		:new.store_item_id := store_item_id;
	  end if;
   end if; 

   if :new.unit_price is null then 
    -- First, we need to get the current list price of the store item 
	if :new.item_id is not null 
        then
		select list_price 
		into l_list_price 
		from items 
		where item_id = :new.item_id; 
	else
		l_list_price := 0; -- ELSE CLAUSE TO LEAVE SPACE FOR NEW STORE_ITEMS LIKE KITS/SETS.
	end if;
    -- Once we have the correct price, we will update the store item with the correct price 
    :new.unit_price := l_list_price; 
  end if; 
END; 

/
ALTER TRIGGER  "STORE_ITEMS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "STORE_ITEMS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON STORE_ITEMS for each row 
 Declare 
  rec STORE_ITEMS_JN%ROWTYPE; 
  blank STORE_ITEMS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.STORE_ITEM_ID := :NEW.STORE_ITEM_ID; 
      rec.STORE_ID := :NEW.STORE_ID; 
      rec.ITEM_ID := :NEW.ITEM_ID; 
      rec.UNIT_PRICE := :NEW.UNIT_PRICE; 
      rec.SALE_START_DATE := :NEW.SALE_START_DATE; 
      rec.DISCOUNT_PCT := :NEW.DISCOUNT_PCT; 
      rec.SALE_END_DATE := :NEW.SALE_END_DATE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.STORE_ITEM_ID := :OLD.STORE_ITEM_ID; 
      rec.STORE_ID := :OLD.STORE_ID; 
      rec.ITEM_ID := :OLD.ITEM_ID; 
      rec.UNIT_PRICE := :OLD.UNIT_PRICE; 
      rec.SALE_START_DATE := :OLD.SALE_START_DATE; 
      rec.DISCOUNT_PCT := :OLD.DISCOUNT_PCT; 
      rec.SALE_END_DATE := :OLD.SALE_END_DATE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into STORE_ITEMS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "STORE_ITEMS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "TOOLS_BRIU" 
    BEFORE INSERT OR UPDATE ON TOOLS 
    FOR EACH ROW 
DECLARE 
  value_in_list number;
BEGIN 
  	-- in lieu of check constraint.
	if :new.tool_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'TOOL_TYPE'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.tool_type := null;
		end if;
	end if;

END; 
/
ALTER TRIGGER  "TOOLS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "TOOLS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON TOOLS for each row 
 Declare 
  rec TOOLS_JN%ROWTYPE; 
  blank TOOLS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.TOOL_ID := :NEW.TOOL_ID; 
      rec.TOOL_TYPE := :NEW.TOOL_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.TOOL_ID := :OLD.TOOL_ID; 
      rec.TOOL_TYPE := :OLD.TOOL_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into TOOLS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "TOOLS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "WEAVES_BRIU" 
    BEFORE INSERT OR UPDATE ON WEAVES 
    FOR EACH ROW 
DECLARE 
  weav_id number; 
  value_in_list number;
BEGIN 
  if inserting then   
    if :new.weave_id is null then 
      select weav_seq.nextval 
        into weav_id 
        from dual; 
      :new.weave_id := weav_id; 
    end if; 
  end if; 

  	-- in lieu of check constraint.
	if :new.complexity is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'WEAVE_COMPLEXITY'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.complexity := null;
		end if;
	end if;

END; 

/
ALTER TRIGGER  "WEAVES_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "WEAVES_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON WEAVES for each row 
 Declare 
  rec WEAVES_JN%ROWTYPE; 
  blank WEAVES_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.WEAVE_ID := :NEW.WEAVE_ID; 
      rec.NAME := :NEW.NAME; 
      rec.SYNONYMS := :NEW.SYNONYMS; 
      rec.PARENT_WEAVE_ID := :NEW.PARENT_WEAVE_ID; 
      rec.COMPLEXITY := :NEW.COMPLEXITY; 
      rec.DESCRIPTION := :NEW.DESCRIPTION; 
      rec.SPEED_WEAVE := :NEW.SPEED_WEAVE; 
      rec.SOURCE_URL := :NEW.SOURCE_URL; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.WEAVE_ID := :OLD.WEAVE_ID; 
      rec.NAME := :OLD.NAME; 
      rec.SYNONYMS := :OLD.SYNONYMS; 
      rec.PARENT_WEAVE_ID := :OLD.PARENT_WEAVE_ID; 
      rec.COMPLEXITY := :OLD.COMPLEXITY; 
      rec.DESCRIPTION := :OLD.DESCRIPTION; 
      rec.SPEED_WEAVE := :OLD.SPEED_WEAVE; 
      rec.SOURCE_URL := :OLD.SOURCE_URL; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into WEAVES_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "WEAVES_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "WEAVE_ARS_BRIU" 
    BEFORE INSERT OR UPDATE ON WEAVE_ARS 
    FOR EACH ROW 
DECLARE 
  weave_ar_order number; 
  weav_ar_id number; 
BEGIN 
  if inserting then   
    if :new.weave_ar_id is null then 
      select weav_ar_seq.nextval 
        into weav_ar_id 
        from dual; 
      :new.weave_ar_id := weav_ar_id; 
    end if; 

    if :new.ar_sort_order is null then 
      select nvl(max(ar_sort_order), 0)
	  into weave_ar_order
	  from weave_ars
	  where weave_id=:new.weave_id;

      :new.ar_sort_order := weave_ar_order +1; 
    end if; 
  end if; 
END; 

/
ALTER TRIGGER  "WEAVE_ARS_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "WEAVE_ARS_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON WEAVE_ARS for each row 
 Declare 
  rec WEAVE_ARS_JN%ROWTYPE; 
  blank WEAVE_ARS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.WEAVE_AR_ID := :NEW.WEAVE_AR_ID; 
      rec.WEAVE_ID := :NEW.WEAVE_ID; 
      rec.OPTIMAL_AR := :NEW.OPTIMAL_AR; 
      rec.MIN_AR := :NEW.MIN_AR; 
      rec.MAX_AR := :NEW.MAX_AR; 
      rec.AR_SORT_ORDER := :NEW.AR_SORT_ORDER; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.WEAVE_AR_ID := :OLD.WEAVE_AR_ID; 
      rec.WEAVE_ID := :OLD.WEAVE_ID; 
      rec.OPTIMAL_AR := :OLD.OPTIMAL_AR; 
      rec.MIN_AR := :OLD.MIN_AR; 
      rec.MAX_AR := :OLD.MAX_AR; 
      rec.AR_SORT_ORDER := :OLD.AR_SORT_ORDER; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into WEAVE_ARS_JN VALUES rec; 
  END; 

/
ALTER TRIGGER  "WEAVE_ARS_JNTRG" ENABLE
/
CREATE OR REPLACE TRIGGER  "WIRES_BRIU" 
    BEFORE INSERT OR UPDATE ON WIRES 
    FOR EACH ROW 
DECLARE 
  value_in_list number;
BEGIN 
  	-- in lieu of check constraint.
	if :new.wire_type is not null then
		select nvl(count(*),0)
			into value_in_list
			from domains
			where domain_name = 'WIRE_TYPE'
			and active = 'Y';
		if (value_in_list = 0) then
			:new.wire_type := null;
		end if;
	end if;

END; 
/
ALTER TRIGGER  "WIRES_BRIU" ENABLE
/
CREATE OR REPLACE TRIGGER  "WIRES_JNTRG" 
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON WIRES for each row 
 Declare 
  rec WIRES_JN%ROWTYPE; 
  blank WIRES_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.WIRE_ID := :NEW.WIRE_ID; 
      rec.WIRE_TYPE := :NEW.WIRE_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.WIRE_ID := :OLD.WIRE_ID; 
      rec.WIRE_TYPE := :OLD.WIRE_TYPE; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into WIRES_JN VALUES rec; 
  END;

/
ALTER TRIGGER  "WIRES_JNTRG" ENABLE
/
CREATE OR REPLACE FORCE VIEW  "LEGAL_PERSONS_VIEW" ("PERSON_ID", "LEGAL_NAME", "EMAIL", "PHONE_FIXED", "IS_COMPETITOR", "PERSON_TYPE", "WEBSITE", 
	 CONSTRAINT "LEGAL_PERSONS_VIEW_PK" PRIMARY KEY ("PERSON_ID") DISABLE) AS 
  SELECT
        p.person_id,
        l.legal_name,
        p.email,
        p.phone_fixed,
        p.is_competitor,
        p.person_type,
        l.website
    FROM
        persons p
        JOIN legal_persons l ON ( p.person_id = l.person_id )
/
CREATE OR REPLACE FORCE VIEW  "NATURAL_PERSONS_VIEW" ("PERSON_ID", "FIRST_NAME", "LAST_NAME", "EMAIL", "PHONE_FIXED", "IS_COMPETITOR", "PERSON_TYPE", 
	 CONSTRAINT "NATURAL_PERSONS_VIEW_PK" PRIMARY KEY ("PERSON_ID") DISABLE) AS 
  SELECT
        p.person_id,
        n.first_name,
        n.last_name,
        p.email,
        p.phone_fixed,
        p.is_competitor,
        p.person_type
    FROM
        persons p
        JOIN natural_persons n ON ( p.person_id = n.person_id )
/
